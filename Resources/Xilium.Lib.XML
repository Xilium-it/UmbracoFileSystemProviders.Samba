<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xilium.Lib</name>
    </assembly>
    <members>
        <member name="P:Xilium.Lib.Cache.FileCache.FileCache.DefaultRegion">
            <summary>
            Used to store the default region when accessing the cache via [] calls
            </summary>
        </member>
        <member name="P:Xilium.Lib.Cache.FileCache.FileCache.DefaultPolicy">
            <summary>
            Used to set the default policy when setting cache values via [] calls
            </summary>
        </member>
        <member name="P:Xilium.Lib.Cache.FileCache.FileCache.AccessTimeout">
            <summary>
            Used to determine how long the FileCache will wait for a file to become 
            available.  Default (00:00:00) is indefinite.  Should the timeout be
            reached, an exception will be thrown.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Cache.FileCache.FileCache.MaxCacheSize">
            <summary>
            Used to specify the disk size, in bytes, that can be used by the File Cache
            </summary>
        </member>
        <member name="P:Xilium.Lib.Cache.FileCache.FileCache.CurrentCacheSize">
            <summary>
            Returns the approximate size of the file cache
            </summary>
        </member>
        <member name="E:Xilium.Lib.Cache.FileCache.FileCache.MaxCacheSizeReached">
            <summary>
            Event that will be called when <see cref="P:Xilium.Lib.Cache.FileCache.FileCache.MaxCacheSize"/> is reached.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Cache.FileCache.FileCache.DefaultCachePath">
            <summary>
            The default cache path used by FC.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.#ctor(System.Boolean,System.TimeSpan)">
            <summary>
            Creates a default instance of the file cache.  Don't use if you plan to serialize custom objects
            </summary>
            <param name="calculateCacheSize">If true, will calcualte the cache's current size upon new object creation.
            Turned off by default as directory traversal is somewhat expensive and may not always be necessary based on
            use case.
            </param>
            <param name="cleanInterval">If supplied, sets the interval of time that must occur between self cleans</param>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.#ctor(System.String,System.Boolean,System.TimeSpan)">
            <summary>
            Creates an instance of the file cache using the supplied path as the root save path.
            </summary>
            <param name="cacheRoot">The cache's root file path</param>
            <param name="calculateCacheSize">If true, will calcualte the cache's current size upon new object creation.
            Turned off by default as directory traversal is somewhat expensive and may not always be necessary based on
            use case.
            </param>
            <param name="cleanInterval">If supplied, sets the interval of time that must occur between self cleans</param>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.#ctor(System.Runtime.Serialization.SerializationBinder,System.Boolean,System.TimeSpan)">
            <summary>
            Creates an instance of the file cache.
            </summary>
            <param name="binder">The SerializationBinder used to deserialize cached objects.  Needed if you plan
            to cache custom objects.
            </param>
            <param name="calculateCacheSize">If true, will calcualte the cache's current size upon new object creation.
            Turned off by default as directory traversal is somewhat expensive and may not always be necessary based on
            use case.
            </param>
            <param name="cleanInterval">If supplied, sets the interval of time that must occur between self cleans</param>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.#ctor(System.String,System.Runtime.Serialization.SerializationBinder,System.Boolean,System.TimeSpan)">
            <summary>
            Creates an instance of the file cache.
            </summary>
            <param name="cacheRoot">The cache's root file path</param>
            <param name="binder">The SerializationBinder used to deserialize cached objects.  Needed if you plan
            to cache custom objects.</param>
            <param name="calculateCacheSize">If true, will calcualte the cache's current size upon new object creation.
            Turned off by default as directory traversal is somewhat expensive and may not always be necessary based on
            use case.
            </param>
            <param name="cleanInterval">If supplied, sets the interval of time that must occur between self cleans</param>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.ShrinkCacheToSize(System.Int64,System.String)">
            <summary>
            Shrinks the cache until the cache size is less than
            or equal to the size specified (in bytes). This is a
            rather expensive operation, so use with discretion.
            </summary>
            <returns>The new size of the cache</returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.CleanCache(System.String)">
            <summary>
            Loop through the cache and delete all expired files
            </summary>
            <returns>The amount removed (in bytes)</returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.DeleteOldestFiles(System.Int64,System.String)">
            <summary>
            Delete the oldest items in the cache to shrink the chache by the
            specified amount (in bytes).
            </summary>
            <returns>The amount of data that was actually removed</returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.UpdateCacheSizeAsync">
            <summary>
            This method calls GetCacheSize on a separate thread to 
            calculate and then store the size of the cache.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.GetCacheSize(System.String)">
            <summary>
            Calculates the size, in bytes of the file cache
            </summary>
            <param name="regionName">The region to calculate.  If NULL, will return total size.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.CacheSizeHelper(System.IO.DirectoryInfo)">
            <summary>
            Helper method for public <see cref="M:Xilium.Lib.Cache.FileCache.FileCache.GetCacheSize(System.String)"/>.
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.Flush(System.String)">
            <summary>
            Flushes the file cache using DateTime.Now as the minimum date
            </summary>
            <param name="regionName"></param>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.Flush(System.DateTime,System.String)">
            <summary>
            Flushes the cache based on last access date, filtered by optional region
            </summary>
            <param name="minDate"></param>
            <param name="regionName"></param>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.FlushHelper(System.IO.DirectoryInfo,System.DateTime)">
            <summary>
            Helper method for public flush
            </summary>
            <param name="root"></param>
            <param name="minDate"></param>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.GetPolicy(System.String,System.String)">
            <summary>
            Returns the policy attached to a given cache item.  
            </summary>
            <param name="key">The key of the item</param>
            <param name="regionName">The region in which the key exists</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.GetKeys(System.String)">
            <summary>
            Returns a list of keys for a given region.  
            </summary>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.GetStream(System.String,System.IO.FileMode,System.IO.FileAccess,System.Boolean)">
            <summary>
            This function servies to centralize file stream access within this class.
            </summary>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="access"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.ReadFile(System.String,System.String,System.Runtime.Serialization.SerializationBinder)">
            <summary>
            This function serves to centralize file reads within this class.
            </summary>
            <param name="path"></param>
            <param name="objectBinder"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.WriteFile(System.String,Xilium.Lib.Cache.FileCache.FileCachePayload,System.String)">
            <summary>
            This function serves to centralize file writes within this class
            </summary>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.ReadSysFile(System.String)">
            <summary>
            Reads data in from a system file. System files are not part of the
            cache itself, but serve as a way for the cache to store data it 
            needs to operate.
            </summary>
            <param name="filename">The name of the sysfile (without directory)</param>
            <returns>The data from the file</returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.WriteSysFile(System.String,System.Object)">
            <summary>
            Writes data to a system file that is not part of the cache itself,
            but is used to help it function.
            </summary>
            <param name="filename">The name of the sysfile (without directory)</param>
            <param name="data">The data to write to the file</param>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.GetCachePath(System.String,System.String)">
            <summary>
            Builds a string that will place the specified file name within the appropriate 
            cache and workspace folder.
            </summary>
            <param name="FileName"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.GetPolicyPath(System.String,System.String)">
            <summary>
            Builds a string that will get the path to the supplied file's policy file
            </summary>
            <param name="FileName"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.GetEnumerator(System.String)">
            <summary>
            Returns an enumerator for the specified region (defaults to base-level cache directory).
            This function *WILL NOT* recursively locate files in subdirectories.
            </summary>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.FileCache.GetEnumerator">
            <summary>
            Will return an enumerator with all cache items listed in the root file path ONLY.  Use the other
            <see cref="M:Xilium.Lib.Cache.FileCache.FileCache.GetEnumerator(System.String)"/> if you want to specify a region
            </summary>
            <returns></returns>
        </member>
        <!-- Commento XML in formato non corretto ignorato per il membro 'T:Xilium.Lib.Cache.FileCache.FileCacheBinder' -->
        <member name="T:Xilium.Lib.Cache.FileCache.PriortyQueue`1">
            <summary>
            A basic min priorty queue (min heap)
            </summary>
            <typeparam name="T">Data type to store</typeparam>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.PriortyQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Default constructor.
            </summary>
            <param name="comparer">The comparer to use.  The default comparer will make the smallest item the root of the heap.  
            
            </param>
        </member>
        <member name="M:Xilium.Lib.Cache.FileCache.PriortyQueue`1.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructor that will convert an existing list into a min heap
            </summary>
            <param name="unsorted">The unsorted list of items</param>
            <param name="comparer">The comparer to use.  The default comparer will make the smallest item the root of the heap.</param>
        </member>
        <member name="T:Xilium.Lib.Cache.RapidFileCache.KeyEncoders.Base64KeyEncoder">
            <summary>
            Codifica in stile BAse64 (il carattere '/' viene sostituito da `-')
            </summary>
        </member>
        <member name="T:Xilium.Lib.Cache.RapidFileCache.KeyEncoders.HashKeyEncoder">
            <summary>
            Codifica con SHA256
            </summary>
        </member>
        <member name="T:Xilium.Lib.Cache.RapidFileCache.KeyEncoders.SafeKeyEncoder">
            <summary>
            Codifica solo i caratteri non validi
            </summary>
        </member>
        <member name="T:Xilium.Lib.Cache.RapidFileCache.KeyEncoders.StandardKeyEncoder">
            <summary>
            Senza codifiche
            </summary>
        </member>
        <member name="T:Xilium.Lib.Cache.RapidFileCache.RapidFileCache">
            <summary>
            Descrizione di riepilogo per RapidFileCache
            </summary>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.#ctor(System.String,System.String,System.Runtime.Serialization.SerializationBinder,System.Boolean)">
            <summary>
            Costruisce un nuovo oggetto.
            </summary>
            <param name="name">Nome univoco della cache</param>
            <param name="cacheRoot">Percorso assoluto di memorizzazione della cache su disco</param>
            <param name="binder"></param>
            <param name="calculateCacheSize"></param>
        </member>
        <member name="P:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.KeyEncoder">
            <summary>
            Indica come gestire la chiave internamente.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.SetKeyEncoder(Xilium.Lib.Cache.RapidFileCache.KeyEncoders.IKeyEncoder)">
            <summary>
            Permette di settare il sistema di codifica della chiave su file.
            </summary>
            <param name="keyEncoder"></param>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.CheckKeyValidity(System.String)">
            <summary>
            Verifica che `key` può essere impiegato come chiave di cache.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.EncodeKey(System.String)">
            <summary>
            Adatta `key` per essere impiegato come chiave di cache. (vedere `CheckKeyValidity`)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.DecodeKey(System.String)">
            <summary>
            Decodifica `key` per riportarlo al suo valore originale.
            </summary>
            <param name="codifiedKey"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.Contains(System.String,System.String)">
            <summary>
            Indica se `key` è contenuto in cache.
            </summary>
            <param name="key"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Restituisce il valore in cache; se non presente lo aggiunge quindi restituisce.
            <para>
            Attenzione: la chiave deve essere codificata con `EncodeKey`!
            </para>
            </summary>
            <param name="value"></param>
            <param name="policy"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Restituisce il valore in cache; se non presente lo aggiunge quindi restituisce.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="absoluteExpiration"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Restituisce il valore in cache; se non presente lo aggiunge quindi restituisce.
            </summary>
            <param name="value"></param>
            <param name="policy"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.AddOrGetExisting(System.String,System.Func{System.Object},System.DateTimeOffset,System.String)">
            <summary>
            Restituisce il valore in cache; se non presente lo aggiunge quindi restituisce.
            </summary>
            <param name="key"></param>
            <param name="valueDelegate"></param>
            <param name="absoluteExpiration"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.AddOrGetExisting(System.String,System.Func{System.Object},System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Restituisce il valore in cache; se non presente lo aggiunge quindi restituisce.
            </summary>
            <param name="key"></param>
            <param name="valueDelegate"></param>
            <param name="policy"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.Get(System.String,System.String)">
            <summary>
            Restituisce il valore in cache, o `null` se non trovato.
            </summary>
            <param name="key"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.GetCacheItem(System.String,System.String)">
            <summary>
            Retituisce l'item di cache, o `null` se non trovato.
            </summary>
            <param name="key"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)">
            <summary>
            Memorizza il valore in cache
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="absoluteExpiration"></param>
            <param name="regionName"></param>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Memorizza l'item in cache.
            <para>
            Attenzione: la chiave deve essere codificata con `EncodeKey`!
            </para>
            </summary>
            <param name="item"></param>
            <param name="policy"></param>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Memorizza il valore in cache
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="policy"></param>
            <param name="regionName"></param>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.GetValues(System.String,System.String[])">
            <summary>
            Restituisce una serie di valori dalla cache
            </summary>
            <param name="regionName"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Restituisce una serie di valori dalla cache
            </summary>
            <param name="keys"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.Remove(System.String,System.String)">
            <summary>
            Rimuove un valore dalla cache
            </summary>
            <param name="key"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Cache.RapidFileCache.RapidFileCache.GetCount(System.String)">
            <summary>
            Restituisce il numero di item in cache
            </summary>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Collection.DatePeriod">
            <summary>
            Descrizione di riepilogo per DatePeriod
            </summary>
        </member>
        <member name="P:Xilium.Lib.Collection.DatePeriod.BeginDate">
            <summary>
            Data di inizio periodo. Se è stato impostato un valore per l'argomento `precision`, dateBegin sarà arrotondato al valore inferiore più vicino.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Collection.DatePeriod.EndDate">
            <summary>
            Data di fine periodo. Se è stato impostato un valore per l'argomento `precision`, dateEnd sarà arrotondato al valore inferiore più vicino.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Collection.DatePeriod.ExclusiveEndDate">
            <summary>
            Data di fine limite periodo. Se è stato impostato un valore per l'argomento `precision`, exclusiveDateEnd sarà arrotondato al valore superiore più vicino.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Collection.DatePeriod.PrecisionDelegate">
            <summary>
            Delegate per l'arrotondamento delle date
            </summary>
        </member>
        <member name="P:Xilium.Lib.Collection.DatePeriod.PrecisionTimeSpan">
            <summary>
            Se la classe è inizializzata con TimeSpan, restituisce il valore usato.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Collection.DatePeriod.PrecisionEnum">
            <summary>
            Se la classe è inizializzata con Enum, restituisce il valore usato.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Collection.DatePeriod.Duration">
            <summary>
            Durata del periodo
            </summary>
        </member>
        <member name="P:Xilium.Lib.Collection.DatePeriod.DurationDays">
            <summary>
            Durata del periodo, in giorni
            </summary>
        </member>
        <member name="P:Xilium.Lib.Collection.DatePeriod.MiddlePeriod">
            <summary>
            Restituisce un oggetto DateTime che rappresenta il momento centrale del periodo.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriod.And(Xilium.Lib.Collection.DatePeriod)">
            <summary>
            Esegue un'operazione booleana AND fra il periodo corrente e quello indicato:
            in pratica crea un nuovo DatePeriod il cui periodo è compreso su entrambi gli oggetti.
            Attenzione: se i periodi non si sovrappongono, la funzione restituisce NULL.
            </summary>
            <param name="datePeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriod.Or(Xilium.Lib.Collection.DatePeriod)">
            <summary>
            Esegue un'operazione booleana OR fra il periodo corrente e quello indicato:
            in pratica crea un nuovo DatePeriod il cui periodo è la sommatoria fra i periodi dei due oggetti.
            </summary>
            <param name="datePeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriod.IsIncluded(System.DateTime)">
            <summary>
            Indica se la data indicata risulta compresa nel periodo
            </summary>
            <param name="dateTime">Data di confronto</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriod.Subtract(System.DateTime)">
            <summary>
            Se "dateTime" è incluso nel periodo, restituisce la distanza dal momentro centrale periodo.
            <para>Se "dateTime" non è incluso nel periodo, restituisce la distanza da "BeginDate" (valore positivo) o da "EndDate" (valore negativo).</para>
            </summary>
            <param name="dateTime">Data di confronto</param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Collection.DatePeriod.Precision">
            <summary>
            Metodi predefiniti di arrotondamento periodi
            </summary>
        </member>
        <member name="F:Xilium.Lib.Collection.DatePeriod.Precision.undefined">
            <summary>
            Non definito
            </summary>
        </member>
        <member name="F:Xilium.Lib.Collection.DatePeriod.Precision.Year">
            <summary>
            Il periodo termina con la fine dell'anno indicato con EndDate
            </summary>
        </member>
        <member name="F:Xilium.Lib.Collection.DatePeriod.Precision.Month">
            <summary>
            Il periodo termina con la fine del mese indicato con EndDate
            </summary>
        </member>
        <member name="F:Xilium.Lib.Collection.DatePeriod.Precision.Day">
            <summary>
            Il periodo termina con la fine del giorno indicato con EndDate
            </summary>
        </member>
        <member name="F:Xilium.Lib.Collection.DatePeriod.Precision.Hour">
            <summary>
            Il periodo termina con la fine dell'ora indicato con EndDate
            </summary>
        </member>
        <member name="F:Xilium.Lib.Collection.DatePeriod.Precision.HalfHour">
            <summary>
            Il periodo termina con la mezz'ora superiore indicata con EndDate
            </summary>
        </member>
        <member name="F:Xilium.Lib.Collection.DatePeriod.Precision.Quarter">
            <summary>
            Il periodo termina con la fine del quarto d'ora indicato con EndDate
            </summary>
        </member>
        <member name="F:Xilium.Lib.Collection.DatePeriod.Precision.Minute">
            <summary>
            Il periodo termina con la fine del minuto indicato con EndDate
            </summary>
        </member>
        <member name="F:Xilium.Lib.Collection.DatePeriod.Precision.Second">
            <summary>
            Il periodo termina con la fine del secondo indicato con EndDate
            </summary>
        </member>
        <member name="T:Xilium.Lib.Collection.DatePeriodSet">
            <summary>
            Rappresenta un set di oggetto DatePeriod, ed espone metodi per l'elaborazione sulla collection.
            Eredita da List[DatePeriod].
            </summary>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.ClosestPeriod(System.DateTime)">
            <summary>
            Restituisce il periodo più prossimo alla data indicata.
            L'oggetto restituito sarà il primo periodo più vicino non scaduto. In alternativa sarà il periodo scaduto da minor tempo.
            </summary>
            <param name="date">Giorno di riferimento</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.ExistsPeriod(System.DateTime)">
            <summary>
            Restituisce True se esiste un periodo attivo nel giorno indicato
            </summary>
            <param name="date">Giorno di riferimento</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.Round(Xilium.Lib.Collection.DatePeriod.Precision)">
            <summary>
            Arrotonda le date dei periodi.
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.Round(System.TimeSpan)">
            <summary>
            Arrotonda le date dei periodi.
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.Round(Xilium.Lib.Collection.DatePeriod.RoundDateTimeDelegate)">
            <summary>
            Arrotonda le date dei periodi.
            </summary>
            <param name="precisionDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.Compress">
            <summary>
            Crea un nuovo DatePeriodSet raggruppando i periodi quando questi si accavallano (l'uno finisce dopo l'inizio dell'altro).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.Compress(System.DateTime,System.DateTime)">
            <summary>
            Crea un nuovo DatePeriodSet contenente solo periodi compresi nell'intervallo di date indicato, e raggruppa i periodi
            quando questi si accavallano (l'uno finisce dopo l'inizio dell'altro).
            <para>Se un periodo dovesse avere una dataInizio minore di minDate (o una dataFine maggiore di maxDate) tale proprietà sarà portata al valore di soglia.</para>
            <para>I periodi al di fuori dell'intervallo minDate e maxDate saranno scartati.</para>
            </summary>
            <param name="minDate">Soglia minima</param>
            <param name="maxDate">Soglia massima</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.And(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod})">
            <summary>
            Esegue l'operazione booleana AND fra i due set di DatePeriod:
            in pratica restituisce un nuovo set di DatePeriod composto da periodi che sono compresi da entrambi i set.
            </summary>
            <param name="datePeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.Or(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod})">
            <summary>
            Esegue l'operazione booleana OR fra i due set di DatePeriod:
            in pratica restituisce un nuovo set di DatePeriod composto dalla somma dei periodi di entrambi i set.
            </summary>
            <param name="datePeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.ToDateTimeList(System.TimeSpan)">
            <summary>
            Converte una lista DatePeriod in un array di oggetti DateTime.
            </summary>
            <param name="step">Step per il calcolo dei valori da restituire</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.ToDateTimeList(Xilium.Lib.Collection.DatePeriod.Precision)">
            <summary>
            Converte una lista DatePeriod in un array di oggetti DateTime.
            </summary>
            <param name="step">Step per il calcolo dei valori da restituire</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.ClosestPeriod(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod},System.DateTime)">
            <summary>
            Restituisce il periodo più prossimo alla data indicata.
            L'oggetto restituito sarà il primo periodo più vicino non scaduto. In alternativa sarà il periodo scaduto da minor tempo.
            </summary>
            <param name="datePeriods">Elenco dei periodi</param>
            <param name="date">Giorno di riferimento</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.ClosestPeriod(System.Collections.Generic.List{Xilium.Lib.Collection.DatePeriod},System.DateTime)">
            <summary>
            Restituisce il periodo più prossimo alla data indicata.
            L'oggetto restituito sarà il primo periodo più vicino non scaduto. In alternativa sarà il periodo scaduto da minor tempo.
            </summary>
            <param name="datePeriods">Elenco dei periodi</param>
            <param name="date">Giorno di riferimento</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.ExistsPeriod(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod},System.DateTime)">
            <summary>
            Restituisce True se esiste un periodo attivo nel giorno indicato
            </summary>
            <param name="datePeriods">Elenco dei periodi</param>
            <param name="date">Giorno di riferimento</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.Round(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod},Xilium.Lib.Collection.DatePeriod.Precision)">
            <summary>
            Arrotonda le date dei periodi.
            </summary>
            <param name="datePeriods"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.Round(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod},System.TimeSpan)">
            <summary>
            Arrotonda le date dei periodi.
            </summary>
            <param name="datePeriods"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.Round(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod},Xilium.Lib.Collection.DatePeriod.RoundDateTimeDelegate)">
            <summary>
            Arrotonda le date dei periodi.
            </summary>
            <param name="datePeriods"></param>
            <param name="precisionDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.Compress(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod})">
            <summary>
            Crea un nuovo DatePeriodSet raggruppando i periodi quando questi si accavallano (l'uno finisce dopo l'inizio dell'altro).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.Compress(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod},System.DateTime,System.DateTime)">
            <summary>
            Crea un nuovo DatePeriodSet contenente solo periodi compresi nell'intervallo di date indicato, e raggruppa i periodi
            quando questi si accavallano (l'uno finisce dopo l'inizio dell'altro).
            <para>Se un periodo dovesse avere una dataInizio minore di minDate (o una dataFine maggiore di maxDate) tale proprietà sarà portata al valore di soglia.</para>
            <para>I periodi al di fuori dell'intervallo minDate e maxDate saranno scartati.</para>
            </summary>
            <param name="datePeriods">Collezione di datePeriod da comprimere</param>
            <param name="minDate">Soglia minima</param>
            <param name="maxDate">Soglia massima</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.And(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod},System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod})">
            <summary>
            Esegue l'operazione booleana AND fra i due set di DatePeriod:
            in pratica restituisce un nuovo set di DatePeriod composto da periodi che sono compresi da entrambi i set.
            </summary>
            <param name="datePeriod1"></param>
            <param name="datePeriod2"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.Or(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod},System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod})">
            <summary>
            Esegue l'operazione booleana OR fra i due set di DatePeriod:
            in pratica restituisce un nuovo set di DatePeriod composto dalla somma dei periodi di entrambi i set.
            </summary>
            <param name="datePeriod1"></param>
            <param name="datePeriod2"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.ToDateTimeList(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod},Xilium.Lib.Collection.DatePeriod.Precision)">
            <summary>
            Converte una lista DatePeriod in un array di oggetti DateTime.
            </summary>
            <param name="datePeriods">Lista di DatePeriod</param>
            <param name="step">Step per il calcolo dei valori da restituire</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Collection.DatePeriodSet.ToDateTimeList(System.Collections.Generic.IEnumerable{Xilium.Lib.Collection.DatePeriod},System.TimeSpan)">
            <summary>
            Converte una lista DatePeriod in un array di oggetti DateTime.
            </summary>
            <param name="datePeriods">Lista di DatePeriod</param>
            <param name="step">Step per il calcolo dei valori da restituire</param>
            <returns></returns>
        </member>
        <member name="F:Xilium.Lib.Collection.Library.NameValeCollConversionOptions.None">
            <summary>Non viene attivata alcuna feature; la stringa deve avere un formato rigoroso.</summary>
        </member>
        <member name="F:Xilium.Lib.Collection.Library.NameValeCollConversionOptions.ValueBoxOptional">
            <summary>La parte Valore potrebbe non usare caratteri di contenimento.</summary>
        </member>
        <member name="F:Xilium.Lib.Collection.Library.NameValeCollConversionOptions.ContainsWhiteSpace">
            <summary>Fra un carattere di delimitazione ed un altra parte potrebbe trovarsi un carattere white-space.</summary>
        </member>
        <member name="F:Xilium.Lib.Collection.Library.NameValeCollConversionOptions.AllowNullValue">
            <summary>Se la parte Valore appare come non definito, allora verrà impostato a Null.</summary>
        </member>
        <member name="F:Xilium.Lib.Collection.Library.NameValeCollConversionOptions.AllFeatures">
            <summary>Vengono attivate tutte le features.</summary>
        </member>
        <member name="M:Xilium.Lib.Collection.Library.StringToNameValueColl(System.String,System.Char,System.Char)">
            <summary>
            Cerca le coppie chiave-valore da una stringa e restituisce un oggetto NameValueCollection.
            </summary>
            <param name="source">Stringa sorgente.</param>
            <param name="valueDelimiter">Carattere di delimitazione fra la chiave ed il valore.</param>
            <param name="itemDelimiter">Carattere di delimitazione fra item.</param>
            <returns>Restituisce un oggetto NameValueCollection riempito con gli item trovati.</returns>
        </member>
        <member name="M:Xilium.Lib.Collection.Library.StringToNameValueColl(System.String,System.Char,System.Char,System.Char,Xilium.Lib.Collection.Library.NameValeCollConversionOptions)">
            <summary>
            Cerca le coppie chiave-valore da una stringa e restituisce un oggetto NameValueCollection.
            </summary>
            <param name="source">Stringa sorgente.</param>
            <param name="valueDelimiter">Carattere di delimitazione fra la chiave ed il valore.</param>
            <param name="itemDelimiter">Carattere di delimitazione fra item.</param>
            <param name="valueBox">
            	Carattere di contenimento del valore, il quale può contenere qualsiasi carattere, anche i caratteri [valueDelimiter] e [itemDelimiter];
            	per rappresentare un carattere [valueBox] è sufficiente ripeterlo due volte per ogni singola occorrenza.
            </param>
            <param name="conversionOptions">Indica la o le opzioni da attivare per la valutazione di source, rendendo il parser più o meno flessibile ad imperfezioni.</param>
            <returns>Restituisce un oggetto NameValueCollection riempito con gli item trovati.</returns>
        </member>
        <member name="M:Xilium.Lib.Collection.Library.StringToNameValueColl(System.String,System.Char,System.Char,System.Collections.Generic.IEnumerable{System.Char},Xilium.Lib.Collection.Library.NameValeCollConversionOptions)">
            <summary>
            Cerca le coppie chiave-valore da una stringa e restituisce un oggetto NameValueCollection.
            </summary>
            <param name="source">Stringa sorgente.</param>
            <param name="valueDelimiter">Carattere di delimitazione fra la chiave ed il valore.</param>
            <param name="itemDelimiter">Carattere di delimitazione fra item.</param>
            <param name="valueBoxes">
            	Lista di caratteri validi per il contenimento del valore; se la stringa inizia per uno di questi caratteri, il carattere di chiusura dovrà essere lo stesso.
            	La regola si ripete per ogni valore. I valori possono avere carattere di contenimento differenti.
            	La lista può essere vuota, in tal caso significa che non è previsto un carattere di contenimento.
            	Indicando un carattere di contenimento si potrà rappresentare nel valore qualsiasi carattere, anche i caratteri [valueDelimiter] e [itemDelimiter];
            	Carattere di contenimento del valore; se null significa che non è previsto; se indicato il valore può contenere qualsiasi carattere;
            	per rappresentare un carattere [valueBox] è sufficiente ripeterlo due volte per ogni singola occorrenza.
            </param>
            <param name="conversionOptions">Indica la o le opzioni da attivare per la valutazione di source, rendendo il parser più o meno flessibile ad imperfezioni.</param>
            <returns>Restituisce un oggetto NameValueCollection riempito con gli item trovati.</returns>
        </member>
        <member name="M:Xilium.Lib.Collection.Library.NameValueCollToString(System.Collections.Specialized.NameValueCollection,System.Char,System.Char,System.Char,Xilium.Lib.Collection.Library.NameValeCollConversionOptions)">
            <summary>
            Converte le coppie chiave-valore in una stringa, usando i caratteri di delimitazione indicati.
            </summary>
            <param name="source">Oggetto chiave-valore sorgente.</param>
            <param name="valueDelimiter">Carattere di delimitazione fra la chiave ed il valore.</param>
            <param name="itemDelimiter">Carattere di delimitazione fra item.</param>
            <param name="valueBox">
            	Carattere di contenimento del valore, il quale può contenere qualsiasi carattere, anche i caratteri [valueDelimiter] e [itemDelimiter];
            	per rappresentare un carattere [valueBox] è sufficiente ripeterlo due volte per ogni singola occorrenza.
            </param>
            <param name="conversionOptions">Indica la o le opzioni da attivare per la valutazione di source, rendendo il parser più o meno flessibile ad imperfezioni.</param>
            <returns>Restituisce un oggetto NameValueCollection riempito con gli item trovati.</returns>
        </member>
        <member name="T:Xilium.Lib.Contract.Contract`1">
            <summary>
            Definizione di un contratto completo per un Content
            </summary>
            <typeparam name="TFeatureCodesEnum">Tipo Enum che elenca i codici di feature disponibili. Ogni valore dell'enum deve implementare l'attributo [ContractFeatureCodeMetaInfo].</typeparam>
        </member>
        <member name="P:Xilium.Lib.Contract.Contract`1.Terms">
            <summary>
            Elenco dei periodi di contratto.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Contract.Contract`1.AlwaysTerm">
            <summary>
            Rappresenta il periodo speciale "Sempre".
            Questo conterrà tutte le feature previste dal contratto, mentre gli altri periodi possono contenere un sottoinseme di feature.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Contract.Contract`1.CreateComputedContract(System.Boolean)">
            <summary>
            Ricalcola il contratto corrente ottenendone uno più semplice da consultare:
            - periodi ma non sovrapposti,
            - medesimo elenco di Feature,
            - valori delle feature agglomerati.
            </summary>
            <param name="excludeExpired">se True non verranno creati i periodi scaduti da ieri</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Contract.Contract`1.GetTodayActiveTerm">
            <summary>
            Restituisce il periodo attivo nella data di oggi
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Contract.Contract`1.GetActiveTerm(System.DateTime)">
            <summary>
            Restituisce il periodo attivo nella data indicata
            </summary>
            <param name="computationDate"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Contract.Contract`1.GetComputedFeature(System.DateTime,`0)">
            <summary>
            Calcola il totale della feature richiesta per la data indicata, e restituisce il nuovo oggetto ContractFeature
            </summary>
            <param name="computationDate"></param>
            <param name="featureCode"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Contract.Contract`1.ToDatePeriodSet(System.Func{Xilium.Lib.Contract.ContractTerm{`0},System.Boolean})">
            <summary>
            Crea un oggetto DatePeriodSet composto da tutti i periodi compresi nel contratto.
            </summary>
            <param name="whereConditionDelegate"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Contract.ContractFeature`1">
            <summary>
            Definisce una singola Feature di un termine di contratto.
            </summary>
            <typeparam name="TFeatureCodesEnum">Tipo Enum che elenca i codici di feature disponibili. Ogni valore dell'enum deve implementare l'attributo [ContractFeatureCodeMetaInfo].</typeparam>
        </member>
        <member name="F:Xilium.Lib.Contract.ContractFeatureValueUnits.Bit">
            <summary>
            Valore booleano (es. Recapiti/Email)
            </summary>
        </member>
        <member name="F:Xilium.Lib.Contract.ContractFeatureValueUnits.Code">
            <summary>
            Codice (es. Layout)
            </summary>
        </member>
        <member name="F:Xilium.Lib.Contract.ContractFeatureValueUnits.Number">
            <summary>
            Quantitativo (es. Minisito/Sottopabine)
            </summary>
        </member>
        <member name="F:Xilium.Lib.Contract.ContractFeatureValueUnits.Weight">
            <summary>
            Peso, incidenza (es. Home/Banner/pp)
            </summary>
        </member>
        <member name="T:Xilium.Lib.Contract.ContractTerm`1">
            <summary>
            Definizione di un termine contrattuale, con le rispettive feature
            </summary>
            <typeparam name="TFeatureCodesEnum">Tipo Enum che elenca i codici di feature disponibili. Ogni valore dell'enum deve implementare l'attributo [ContractFeatureCodeMetaInfo].</typeparam>
        </member>
        <member name="M:Xilium.Lib.Contract.ContractTerm`1.InPeriod(System.DateTime)">
            <summary>
            Restituisce True se la data computationDate rientra nel periodo del Termine contrattuale.
            </summary>
            <param name="computationDate"></param>
            <returns></returns>
        </member>
        <member name="F:Xilium.Lib.Convert.DateTimeConverter.UnixTimeZeroDay">
            <summary>
            Restituisce un oggetto Datetime a cui corrisponde il momento "Zero" secondo il sistema Unix Time.
            (vedere https://en.wikipedia.org/wiki/Unix_time)
            </summary>
        </member>
        <member name="M:Xilium.Lib.Convert.DateTimeConverter.FromUnixTime(System.Int64)">
            <summary>
            Restituisce il valore DateTime in formato UnixTime. (vedere https://en.wikipedia.org/wiki/Unix_time)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Convert.DateTimeConverter.FromUnixTime(System.Nullable{System.Int64})">
            <summary>
            Restituisce il valore DateTime in formato UnixTime. (vedere https://en.wikipedia.org/wiki/Unix_time)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Convert.DateTimeConverter.ToUnixTime(System.DateTime)">
            <summary>
            Restituisce il valore DateTime in formato UnixTime. (vedere https://en.wikipedia.org/wiki/Unix_time)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Convert.DateTimeConverter.ToUnixTime(System.Nullable{System.DateTime})">
            <summary>
            Restituisce il valore DateTime in formato UnixTime. (vedere https://en.wikipedia.org/wiki/Unix_time)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Currency.Contracts.IDiscountNumber">
            <summary>
            Rappresenta uno sconto applicabile all'oggetto PriceNumber.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.Contracts.IDiscountNumber.Price">
            <summary>
            Oggetto Price a cui si applica lo sconto
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IDiscountNumber.SetPrice(Xilium.Lib.Currency.PriceNumber)">
            <summary>
            Imposta la property `Price`.
            <para>L'operazione comporta la relativa modifica della property `Discount` dell'oggetto `Price` che si va ad associare o disassociare.</para>
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Xilium.Lib.Currency.Contracts.IDiscountNumber.DiscountValue">
            <summary>
            Ammontare dello sconto da applicare a Price.Value, nella valuta prevista dallo sconto stesso
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IDiscountNumber.CalcDiscountValue(Xilium.Lib.Currency.PriceNumber)">
            <summary>
            Calcola l'ammontare dello sconto sul prezzo Price.Value, nella valuta del prezzo.
            </summary>
            <param name="price">Price su cui calcolare lo sconto</param>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IDiscountNumber.CalcDiscountValue(Xilium.Lib.Currency.CurrencyDefinition,System.Decimal)">
            <summary>
            Calcola l'ammontare dello sconto sul prezzo indicato, nella valuta del prezzo.
            </summary>
            <param name="priceCurrency">Valuta del prezzo indicato</param>
            <param name="priceValue">Valore del prezzo su cui calcolare lo sconto</param>
        </member>
        <member name="P:Xilium.Lib.Currency.Contracts.IDiscountNumber.ReverseDiscountValue">
            <summary>
            Ammontare dello sconto applicato a Price.NetValue, nella valuta prevista dallo sconto stesso.
            <para>Calcola lo sconto già applicato al valore.</para>
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IDiscountNumber.CalcReverseDiscountValue(Xilium.Lib.Currency.PriceNumber)">
            <summary>
            Calcola l'ammontare dello sconto applicato Price.NetValue, nella valuta del prezzo.
            <para>Calcola lo sconto già applicato al valore.</para>
            </summary>
            <param name="price">Price a cui è calcolato lo sconto (property NetValue)</param>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IDiscountNumber.CalcReverseDiscountValue(Xilium.Lib.Currency.CurrencyDefinition,System.Decimal)">
            <summary>
            Calcola l'ammontare dello sconto applicato al prezzo indicato, nella valuta del prezzo.
            <para>Calcola lo sconto già applicato al valore.</para>
            </summary>
            <param name="priceCurrency">Valuta del prezzo indicato</param>
            <param name="netPriceValue">Valore del prezzo a cui è applicato lo sconto</param>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IDiscountNumber.CloneNoPrice(Xilium.Lib.Currency.CurrencyDefinition)">
            <summary>
            Clona l'oggetto Discount convertendo i valori di sconto sulla nuova moneta, e senza indicare un valore per la property Price.
            </summary>
            <param name="newCurrency"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IDiscountNumber.CloneToPrice(Xilium.Lib.Currency.PriceNumber)">
            <summary>
            Clona l'oggetto Discount e lo applica all'oggtto Price in argomento.
            Se necessario, esegue le conversioni di Value per mantenere il medesimo apporto di sconto.
            </summary>
            <param name="price">Oggetto price di destinazione</param>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IDiscountNumber.ToString">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IDiscountNumber.ToString(System.String)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="format">Formato di conversione del numero in stringa (vedere IUmNumberFormatProvider.StringFormat).</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IDiscountNumber.ToString(Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IDiscountNumber.ToString(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="format">Formato di conversione del numero in stringa (vedere IUmNumberFormatProvider.StringFormat).</param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Currency.Contracts.IPriceNumberFormatProvider">
            <summary>
            Rappresenta un formattatore di oggetti PriceNumber
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.Contracts.IPriceNumberFormatProvider.NetPriceStringFormat">
            <summary>
            Formato di conversione del prezzo netto in stringa.
            <para>Usare i segnaposto per indicare:</para>
            <para>- `{0}`: prezzo lordo.</para>
            <para>- `{1}`: sconto.</para>
            <para>- `{2}`: prezzo netto.</para>
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.Contracts.IPriceNumberFormatProvider.DetailedPriceStringFormat">
            <summary>
            Formato di conversione del prezzo netto con relativo sconto in stringa.
            <para>Usare i segnaposto per indicare:</para>
            <para>- `{0}`: prezzo lordo.</para>
            <para>- `{1}`: sconto.</para>
            <para>- `{2}`: prezzo netto.</para>
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.Contracts.IPriceNumberFormatProvider.ComposedPriceStringFormat">
            <summary>
            Collezione dei due formati di conversione in stringa `NetPrice` e `DetailedPrice`, separati da ";".
            <para>Verrà usato il primo formato (NetPrice) quando il prezzo è senza sconto; mentre verrà usato il secondo (DetailedPrice) quando esiste uno sconto.</para>
            <para>`ComposedPrice` può contenere solo un formato (NetPrice): in tal caso verrà usato sempre questo anche se il prezzo contiene uno sconto.</para>
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.Contracts.IPriceNumberFormatProvider.PerCentDiscountPriceStringFormat">
            <summary>
            Formato di conversione dello sconto percentuale in stringa
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IPriceNumberFormatProvider.ResetComposedPriceStringFormat">
            <summary>
            Setta `ComposedPriceStringFormat` combinando i valori di `NetPriceStringFormat` e `DetailedPriceStringFormat`.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.Contracts.IPriceNumberFormatProvider.FormatPriceNumberToString(System.String,System.Object[])">
            <summary>
            Esegue la formattazione della stringa secondo il formato passato, e sostituendo i segnaposto con i parametri.
            <para>Da utilizzare in alternativa a `string.Format` per la conversione di oggetti UmNumber</para>
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Currency.Contracts.IPriceNumberFormattable">
            <summary>
            Definisce un oggetto convertibile tramite i metodi `IPriceNumberFormatProvider.FormatToString` e `IPriceNumberFormatProvider.FormatToHtml`.
            </summary>
        </member>
        <member name="T:Xilium.Lib.Currency.CurrencyDefinition">
            <summary>
            Definisce una Valuta monetaria, il valore di conversione con la Valuta base e il formato di conversione di un prezzo in Testo e in Html.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.CurrencyDefinition.Decimals">
            <summary>
            Numero dei decimali di rappresentazione del valore (es. 2 per EURO)
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.CurrencyDefinition.MainCurrencyRatio">
            <summary>
            Fattore di conversione della valuta corrente nella valuta principale.
            <para>Il valore indica quanto denaro nella valuta principale occorrone per acquistare "una unità" della valuta corrente.</para>
            <example>Es: indicando Euro come valuta principale, sulla valuta "US Dollar" la property sarà valorizzata a `0.76`.</example>
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.CurrencyDefinition.MainCurrency">
            <summary>
            Indica la valuta principale.
            <para>Verrà usata come riferimento per determinare la conversione fra valute.</para>
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.CurrencyDefinition.DefaultPriceNumberFormat">
            <summary>
            Formato di default di conversione del prezzo in stringa
            </summary>
        </member>
        <member name="T:Xilium.Lib.Currency.CurrencyNumber">
            <summary>
            Rappresenta un valore monetario semplice.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.CurrencyNumber.Currency">
            <summary>
            Valuta del prezzo
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.CurrencyNumber.ToCurrency(Xilium.Lib.Currency.CurrencyDefinition)">
            <summary>
            Converte il valore nella nuova valuta
            </summary>
            <param name="currency">La nuova valuta</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.CurrencyNumber.ToCurrency(Xilium.Lib.Currency.CurrencyDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore nella nuova valuta
            </summary>
            <param name="currency">La nuova valuta</param>
            <param name="prefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.CurrencyNumber.ValueToCurrency(Xilium.Lib.Currency.CurrencyDefinition)">
            <summary>
            Converte il valore monetario nella nuova valuta
            </summary>
            <param name="currency">La valuta di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.CurrencyNumber.ValueToCurrency(Xilium.Lib.Currency.CurrencyDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore monetario nella nuova valuta
            </summary>
            <param name="currency">La valuta di destinazione</param>
            <param name="prefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.CurrencyNumber.ValueToCurrency(System.Decimal,Xilium.Lib.Currency.CurrencyDefinition,Xilium.Lib.Currency.CurrencyDefinition)">
            <summary>
            Converte il valore monetario nella nuova valuta
            </summary>
            <param name="sourceCurrency">La valuta sorgente</param>
            <param name="destCurrency">La valuta di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.CurrencyNumber.ValueToCurrency(System.Decimal,Xilium.Lib.Currency.CurrencyDefinition,Xilium.Lib.Math.Um.UmPrefixItem,Xilium.Lib.Currency.CurrencyDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore monetario nella nuova valuta
            </summary>
            <param name="destCurrency">La valuta di destinazione</param>
            <param name="destPrefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.PriceNumberFormat.#ctor(Xilium.Lib.Currency.Contracts.IPriceNumberFormatProvider)">
            <summary>
            Crea una nuova istanza copiando i valori dal formato indicato
            </summary>
            <param name="sourceFormatProvider"></param>
        </member>
        <member name="T:Xilium.Lib.Currency.ValueNumber">
            <summary>
            Rappresenta un valore monetario, un prezzo o uno sconto.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.StandardDiscount.PureDiscountNumber.#ctor(Xilium.Lib.Currency.CurrencyDefinition,System.Decimal)">
            <summary>
            Crea un nuovo oggeto scontto di tipo Puro.
            </summary>
            <param name="currency"></param>
            <param name="value">Valore dello sconto; il valore dev'essere positivo (es. indicando 12.5 si applica uno sconto di tale valore con la medesima valuta del prezzo)</param>
        </member>
        <member name="M:Xilium.Lib.Currency.StandardDiscount.PureDiscountNumber.#ctor(Xilium.Lib.Currency.CurrencyDefinition,System.Decimal,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Crea un nuovo oggeto scontto di tipo Puro.
            </summary>
            <param name="currency"></param>
            <param name="value">Valore dello sconto; il valore dev'essere positivo (es. indicando 12.5 si applica uno sconto di tale valore con la medesima valuta del prezzo)</param>
            <param name="prefix"></param>
        </member>
        <member name="M:Xilium.Lib.Currency.StandardDiscount.PureDiscountNumber.#ctor(Xilium.Lib.Currency.PriceNumber,System.Decimal)">
            <summary>
            Crea un nuovo oggeto scontto di tipo Puro.
            </summary>
            <param name="price">Oggetto Price a cui va applicato lo sconto</param>
            <param name="value">Valore dello sconto; il valore dev'essere positivo (es. indicando 12.5 si applica uno sconto di tale valore con la medesima valuta del prezzo)</param>
        </member>
        <member name="M:Xilium.Lib.Currency.StandardDiscount.PerCentDiscountNumber.#ctor(System.Decimal)">
            <summary>
            Crea un nuovo oggeto scontto di tipo Puro.
            </summary>
            <param name="value">Valore dello sconto; il valore dev'essere positivo (es. indicando 12.5 si applica uno sconto di tale valore con la medesima valuta del prezzo)</param>
        </member>
        <member name="M:Xilium.Lib.Currency.StandardDiscount.PerCentDiscountNumber.#ctor(Xilium.Lib.Math.Um.UmDefinition,System.Decimal)">
            <summary>
            Crea un nuovo oggeto scontto di tipo Puro.
            </summary>
            <param name="umRate">Definizione UM che rappresenta un unità di misura Percentuale</param>
            <param name="value">Valore dello sconto; il valore dev'essere positivo (es. indicando 12.5 si applica uno sconto di tale valore con la medesima valuta del prezzo)</param>
        </member>
        <member name="M:Xilium.Lib.Currency.StandardDiscount.PerCentDiscountNumber.#ctor(Xilium.Lib.Math.Um.UmDefinition,System.Decimal,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Crea un nuovo oggeto scontto di tipo Puro.
            </summary>
            <param name="umRate">Definizione UM che rappresenta un unità di misura Percentuale</param>
            <param name="value">Valore dello sconto; il valore dev'essere positivo (es. indicando 12.5 si applica uno sconto di tale valore con la medesima valuta del prezzo)</param>
            <param name="prefix"></param>
        </member>
        <member name="M:Xilium.Lib.Currency.StandardDiscount.PerCentDiscountNumber.#ctor(Xilium.Lib.Currency.PriceNumber,System.Decimal)">
            <summary>
            Crea un nuovo oggeto sconto di tipo PerCent.
            </summary>
            <param name="price">Oggetto Price a cui va applicato lo sconto</param>
            <param name="value">Valore percentuale dello sconto; il valore dev'essere positivo (es. 12.5 corrisponde a 12.5%)</param>
        </member>
        <member name="M:Xilium.Lib.Currency.StandardDiscount.PerCentDiscountNumber.#ctor(Xilium.Lib.Currency.PriceNumber,Xilium.Lib.Math.Um.UmDefinition,System.Decimal)">
            <summary>
            Crea un nuovo oggeto sconto di tipo PerCent.
            </summary>
            <param name="price">Oggetto Price a cui va applicato lo sconto</param>
            <param name="umRate">Definizione UM che rappresenta un unità di misura Percentuale</param>
            <param name="value">Valore percentuale dello sconto; il valore dev'essere positivo (es. 12.5 corrisponde a 12.5%)</param>
        </member>
        <member name="M:Xilium.Lib.Currency.StandardDiscount.PerCentDiscountNumber.formatCorrector(System.String)">
            <summary>
            Sposta l'indicazione di unità di misura in coda al formato.
            </summary>
            <param name="format">Formato da verificare e correggere</param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Currency.Support.DiscountNumberBase">
            <summary>
            Classe astratta di definizione di uno sconto di prezzo.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.Support.DiscountNumberBase.Price">
            <summary>
            Oggetto Price a cui si applica lo sconto
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.Support.DiscountNumberBase.SetPrice(Xilium.Lib.Currency.PriceNumber)">
            <summary>
            Imposta la property `Price`.
            <para>L'operazione comporta la relativa modifica della property `Discount` dell'oggetto `Price` che si va ad associare o disassociare.</para>
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Xilium.Lib.Currency.Support.DiscountNumberBase.DiscountValue">
            <summary>
            Ammontare dello sconto
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.Support.DiscountNumberBase.CalcDiscountValue(Xilium.Lib.Currency.PriceNumber)">
            <summary>
            Calcola l'ammontare dello sconto sul prezzo indicato, nella valuta del prezzo.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.Support.DiscountNumberBase.CalcDiscountValue(Xilium.Lib.Currency.CurrencyDefinition,System.Decimal)">
            <summary>
            Calcola l'ammontare dello sconto sul prezzo indicato, nella valuta del prezzo.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.Support.DiscountNumberBase.internalCalcDiscountValue(System.Decimal,Xilium.Lib.Currency.CurrencyDefinition,System.Decimal)">
            <summary>
            Calcola l'ammontare dello sconto da applicare al prezzo indicato, nella valuta del prezzo.
            </summary>
            <param name="value"></param>
            <param name="priceCurrency"></param>
            <param name="priceValue"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.Support.DiscountNumberBase.internalCalcReverseDiscountValue(System.Decimal,Xilium.Lib.Currency.CurrencyDefinition,System.Decimal)">
            <summary>
            Calcola l'ammontare dello sconto applicato al prezzo indicato, nella valuta del prezzo.
            </summary>
            <param name="value"></param>
            <param name="priceCurrency"></param>
            <param name="netPriceValue"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.Support.DiscountNumberBase.ValueToCurrency(Xilium.Lib.Currency.CurrencyDefinition)">
            <summary>
            Converte il valore di sconto nella nuova moneta.
            </summary>
            <param name="currency"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.Support.DiscountNumberBase.CloneNoPrice(Xilium.Lib.Currency.CurrencyDefinition)">
            <summary>
            Clona l'oggetto Discount convertendo i valori di sconto sulla nuova moneta, e senza indicare un valore per la property Price.
            </summary>
            <param name="newCurrency"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.Support.DiscountNumberBase.CloneToPrice(Xilium.Lib.Currency.PriceNumber)">
            <summary>
            Clona l'oggetto Discount e lo applica all'oggtto Price in argomento.
            Se necessario, esegue le conversioni di Value per mantenere il medesimo apporto di sconto.
            </summary>
            <param name="price">Oggetto price di destinazione</param>
        </member>
        <member name="T:Xilium.Lib.Currency.PriceNumber">
            <summary>
            Rappresenta un prezzo, comprensivo di un eventuale sconto.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.PriceNumber.Discount">
            <summary>
            Sconto applicato a `Value`.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.PriceNumber.SetDiscount(Xilium.Lib.Currency.Contracts.IDiscountNumber)">
            <summary>
            Modifica la property `Discount`.
            <para>L'operazione comporta la relativa modifica della property `Price` dell'oggetto `Discount` che si va ad associare o disassociare.</para>
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Xilium.Lib.Currency.PriceNumber.NetValue">
            <summary>
            Valore al netto dello sconto
            </summary>
        </member>
        <member name="M:Xilium.Lib.Currency.PriceNumber.NetValueToUnitPrefix">
            <summary>
            Valore al netto dello sconto nel prefisso UnitPrefix
            </summary>
        </member>
        <member name="P:Xilium.Lib.Currency.PriceNumber.GrossPrice">
            <summary>
            Restituisce l'istanza del numero lordo (non scontato).
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xilium.Lib.Currency.PriceNumber.NetPrice">
            <summary>
            Restituisce l'istanza del numero netto (al netto dello sconto).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.PriceNumber.ToCurrency(Xilium.Lib.Currency.CurrencyDefinition)">
            <summary>
            Converte il prezzo nella nuova valuta
            </summary>
            <param name="currency">La nuova valuta</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.PriceNumber.ToCurrency(Xilium.Lib.Currency.CurrencyDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il prezzo nella nuova valuta
            </summary>
            <param name="currency">La nuova valuta</param>
            <param name="prefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.PriceNumber.internalToCurrency(Xilium.Lib.Currency.CurrencyDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il prezzo nella nuova valuta
            </summary>
            <param name="currency">La nuova valuta</param>
            <param name="prefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Currency.PriceNumber.internalToString(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="combinedFormat">Formato da usare per la conversione in stringa (vedere `IPriceNumberFormatProvider.ComposedPriceStringFormat`).</param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Data.SqlClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xilium.Lib.Data.SqlClient.GetDBType(System.Type,System.Data.SqlDbType)">
            <summary>
            Tenta la conversione verso un oggetto SqlDBType
            </summary>
            <param name="codeType"></param>
            <param name="fallback"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Data.SqlClient.TryGetDBType(System.Type,System.Data.SqlDbType@)">
            <summary>
            Tenta la conversione verso un oggetto SqlDBType
            </summary>
            <param name="codeType"></param>
            <param name="outDbType"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Device.LocationLibrary.MoveGeoCoordinate(System.Device.Location.GeoCoordinate,System.Drawing.Point)">
            <summary>
            Sposta una coordinata di metri (x, y).
            </summary>
            <param name="coordinate">Coordinata di partenza.</param>
            <param name="moveTo">Spostamento, in metri; valori positivi corrispondono alla direzione NORD-EST.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Device.LocationLibrary.MoveGeoCoordinate(System.Device.Location.GeoCoordinate,System.Collections.Generic.IEnumerable{System.Drawing.Point})">
            <summary>
            Sposta una coordinata in metri (x, y). Esegue tanti spostamenti per quanti sono definiti nell'argomento <see cref="!:moveToList"/>.
            </summary>
            <param name="coordinate">Coordinata di partenza</param>
            <param name="moveToList">Elenco dei movimenti, in metri. Verrà restituita una coordinata per ciascun item dell'argomento; valori positivi corrispondono alla direzione NORD-EST.</param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Extensions.Check">
            <summary>
            Estensioni di controllo valore
            </summary>
        </member>
        <member name="M:Xilium.Lib.Extensions.Check.IsNullOrEmpty(System.String)">
            <summary>
            Restituisce True se la stringa è NULL o stringa-vuota.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Check.IsNullOrWhiteSpace(System.String)">
            <summary>
            Restituisce True se la stringa è NULL, vuota o composta solo da spazi vuoti.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Check.IsNullOrEmpty(System.Web.IHtmlString)">
            <summary>
            Restituisce True se la stringa è NULL o stringa-vuota.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Check.IsNullOrWhiteSpace(System.Web.IHtmlString)">
            <summary>
            Restituisce True se la stringa è NULL, vuota o composta solo da spazi vuoti.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Collection.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Tenta di ottenere dal Dictionary il valore corrispondente alla Key indicata. Se non dovesse esistere restituisce il valore di Fallback.
            </summary>
            <param name="dictionary">Il dictionary da interrogare</param>
            <param name="key">Chiave del valore da cercare</param>
            <param name="fallbackValue">Valore restituito nel caso in cui non dovesse esistere la chiave indicata</param>
            <typeparam name="TKey">Tipo per la chiave</typeparam>
            <typeparam name="TValue">Tipo per il valore</typeparam>
            <returns>Restituisce il valore associato alla chiave, se non esiste restituisce il valore fallback.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Location.Move(System.Device.Location.GeoCoordinate,System.Drawing.Point)">
            <summary>
            Sposta una coordinata di metri (x, y).
            </summary>
            <param name="coordinate">Coordinata di partenza.</param>
            <param name="moveTo">Spostamento, in metri; valori positivi corrispondono alla direzione NORD-EST.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Location.Move(System.Device.Location.GeoCoordinate,System.Collections.Generic.IEnumerable{System.Drawing.Point})">
            <summary>
            Sposta una coordinata in metri (x, y). Esegue tanti spostamenti per quanti sono definiti nell'argomento <see cref="!:moveToList"/>.
            </summary>
            <param name="coordinate">Coordinata di partenza</param>
            <param name="moveToList">Elenco dei movimenti, in metri. Verrà restituita una coordinata per ciascun item dell'argomento; valori positivi corrispondono alla direzione NORD-EST.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Reflection.Attributes(System.Enum)">
            <summary>
            Restituisce tutti gli Attributi definiti sul valore Enum
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Reflection.Attributes(System.Object)">
            <summary>
            Restituisce tutti gli Attributi definiti sulla classe
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Reflection.Attribute``1(System.Enum)">
            <summary>
            Restituisce l'Attributo indicato per tipo, definito sul valore Enum
            </summary>
            <param name="value"></param>
            <typeparam name="T">Tipo attributo da restituire</typeparam>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Reflection.Attribute``1(System.Object)">
            <summary>
            Restituisce l'Attributo indicato per tipo, definito sulla classe
            </summary>
            <param name="value"></param>
            <typeparam name="T">Tipo attributo da restituire</typeparam>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Reflection.DescriptionAttribute(System.Enum)">
            <summary>
            Restituisce il testo dell'attributo Description definito sul valore Enum
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Reflection.DescriptionAttribute(System.Object)">
            <summary>
            Restituisce il testo dell'attributo Description definito sulla classe
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.RegexExtensions.MatchNear(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32)">
            <summary>
            Cerca il match più vicino possibile alla posizione `startAt`, e non oltre `tolerance` caratteri.
            <para>Attenzione: il pattern deve iniziare per "\G". <see cref="!:http://stackoverflow.com/questions/5884922/regex-match-startat-and-start-of-string"/></para>
            </summary>
            <param name="regex">
            Regular Expression di verifica match. Attenzione: il pattern deve iniziare per "\G".
            <see cref="!:http://stackoverflow.com/questions/5884922/regex-match-startat-and-start-of-string"/>
            </param>
            <param name="text"></param>
            <param name="startAt"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.DateTimeExtensions.Round(System.DateTime,System.TimeSpan)">
            <summary>
            Come in Math.Round, porta la data al valore minore o maggiore rispetto all'intervallo definito con precision.
            (viene da: http://stackoverflow.com/questions/1393696/c-sharp-rounding-datetime-objects)
            </summary>
            <param name="date"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.DateTimeExtensions.Floor(System.DateTime,System.TimeSpan)">
            <summary>
            Come in Math.Floor, porta la data al valore minore più prossimo.
            (viene da: http://stackoverflow.com/questions/1393696/c-sharp-rounding-datetime-objects)
            </summary>
            <param name="date"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.DateTimeExtensions.Ceiling(System.DateTime,System.TimeSpan)">
            <summary>
            Come in Math.Ceiling, porta la data al valore maggiore più prossimo.
            (viene da: http://stackoverflow.com/questions/1393696/c-sharp-rounding-datetime-objects)
            </summary>
            <param name="date"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.DateTimeExtensions.ToKind(System.DateTime,System.DateTimeKind)">
            <summary>
            Restituisce un nuovo `DateTime` con il nuovo valore per la property `Kind`.
            </summary>
            <param name="date"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.DateTimeExtensions.ToKind(System.Nullable{System.DateTime},System.DateTimeKind)">
            <summary>
            Restituisce un nuovo `DateTime` con il nuovo valore per la property `Kind`.
            </summary>
            <param name="date"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.DateTimeExtensions.ToUtcOffset(System.DateTime,System.TimeSpan)">
            <summary>
            Converte l'oggetto `DateTime` portando il fuso orario al sistema UTC.
            </summary>
            <param name="date">Data da convertire</param>
            <param name="actualOffset">Fuso orario attuale</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.DateTimeExtensions.FromUtcOffset(System.DateTime,System.TimeSpan)">
            <summary>
            Converte l'oggetto `DateTime` del sistema UTC al fuso orario indicato.
            </summary>
            <param name="date"></param>
            <param name="toOffset">Fuso orario di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.DateTimeExtensions.ToOffset(System.DateTime,System.TimeSpan,System.TimeSpan)">
            <summary>
            Converte l'oggetto `DateTime` dal fuso orario `actualOffset` al fuso orario `toOffset`.
            </summary>
            <param name="date"></param>
            <param name="actualOffset">Fuso orario attuale</param>
            <param name="toOffset">Fuso orario di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.DateTimeExtensions.ToUtcOffset(System.Nullable{System.DateTime},System.TimeSpan)">
            <summary>
            Converte l'oggetto `DateTime` portando il fuso orario al sistema UTC.
            </summary>
            <param name="date">Data da convertire</param>
            <param name="actualOffset">Fuso orario attuale</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.DateTimeExtensions.FromUtcOffset(System.Nullable{System.DateTime},System.TimeSpan)">
            <summary>
            Converte l'oggetto `DateTime` del sistema UTC al fuso orario indicato.
            </summary>
            <param name="date"></param>
            <param name="toOffset">Fuso orario di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.DateTimeExtensions.ToOffset(System.Nullable{System.DateTime},System.TimeSpan,System.TimeSpan)">
            <summary>
            Converte l'oggetto `DateTime` dal fuso orario `actualOffset` al fuso orario `toOffset`.
            </summary>
            <param name="date"></param>
            <param name="actualOffset">Fuso orario attuale</param>
            <param name="toOffset">Fuso orario di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.StringInject.Inject(System.String,System.Object)">
            <summary>
            Extension method that replaces keys in a string with the values of matching object properties.
            <remarks>Uses <see cref="!:String.Format()"/> internally; custom formats should match those used for that method.</remarks>
            </summary>
            <param name="formatString">The format string, containing keys like {foo} and {foo:SomeFormat}.</param>
            <param name="injectionObject">The object whose properties should be injected in the string</param>
            <returns>A version of the formatString string with keys replaced by (formatted) key values.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.StringInject.Inject(System.String,System.Collections.IDictionary)">
            <summary>
            Extension method that replaces keys in a string with the values of matching dictionary entries.
            <remarks>Uses <see cref="!:String.Format()"/> internally; custom formats should match those used for that method.</remarks>
            </summary>
            <param name="formatString">The format string, containing keys like {foo} and {foo:SomeFormat}.</param>
            <param name="dictionary">An <see cref="T:System.Collections.IDictionary"/> with keys and values to inject into the string</param>
            <returns>A version of the formatString string with dictionary keys replaced by (formatted) key values.</returns>
        </member>
        <member name="T:Xilium.Lib.Extensions.StringInject.StringInject_ReplacementValueProvider">
            <summary>
            Delegate to define the method that will returns the replacementValue of a key.
            </summary>
            <param name="key">The key name</param>
            <returns>The replacement value to use in Inject methods</returns>
        </member>
        <member name="T:Xilium.Lib.Extensions.StringInject.StringInject_ReplacementFormattedValueProvider">
            <summary>
            Delegate to define the method that will returns the replacementValue of a key.
            </summary>
            <param name="key">The key name</param>
            <param name="align">Number of chars that will dedicated to replacementValue (like String.Format).</param>
            <param name="formatString">The format string that will used on replacementValue (like String.Format).</param>
            <returns>The replacement value to use in Inject methods</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.StringInject.InjectSingleValue(System.String,System.String,System.Object,System.StringComparison)">
            <summary>
            Replaces all instances of a 'key' (e.g. {foo} or {foo:SomeFormat}) in a string with an optionally formatted value, and returns the result.
            </summary>
            <param name="formatString">The string containing the key; unformatted ({foo}), or formatted ({foo:SomeFormat})</param>
            <param name="key">The key name (foo)</param>
            <param name="replacementValue">The replacement value; if null is replaced with an empty string</param>
            <param name="keyComparison">The comparison type for key value</param>
            <returns>The input string with any instances of the key replaced with the replacement value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.StringInject.Inject(System.String,System.Collections.Hashtable)">
            <summary>
            Extension method that replaces keys in a string with the values of matching hashtable entries.
            <remarks>Uses <see cref="!:String.Format()"/> internally; custom formats should match those used for that method.</remarks>
            </summary>
            <param name="formatString">The format string, containing keys like {foo} and {foo:SomeFormat}.</param>
            <param name="attributes">A <see cref="T:System.Collections.Hashtable"/> with keys and values to inject into the string.</param>
            <returns>A version of the formatString string with hastable keys replaced by (formatted) key values.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.StringInject.Inject(System.String,Xilium.Lib.Extensions.StringInject.StringInject_ReplacementValueProvider)">
            <summary>
            Extension method that replaces keys in a string with the values of matching hashtable entries.
            <remarks>Uses <see cref="!:String.Format()"/> internally; custom formats should match those used for that method.</remarks>
            </summary>
            <param name="formatString">The format string, containing keys like {foo} and {foo:SomeFormat}.</param>
            <param name="replacementValueProvider">The provider for the replacement value of current key.</param>
            <returns>A version of the formatString string with hastable keys replaced by (formatted) key values.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.StringInject.Inject(System.String,Xilium.Lib.Extensions.StringInject.StringInject_ReplacementFormattedValueProvider)">
            <summary>
            Extension method that replaces keys in a string with the values of matching hashtable entries.
            <remarks>Uses <see cref="!:String.Format()"/> internally; custom formats should match those used for that method.</remarks>
            </summary>
            <param name="formatString">The format string, containing keys like {foo} and {foo:SomeFormat}.</param>
            <param name="replacementFormattedValueProvider">The provider for the replacement formatted value of current key.</param>
            <returns>A version of the formatString string with hastable keys replaced by (formatted) key values.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.StringInject.Inject(System.String,Xilium.Lib.Extensions.StringInject.StringInject_ReplacementValueProvider,System.String)">
            <summary>
            Extension method that replaces keys in a string with the values of matching hashtable entries.
            <remarks>Uses <see cref="!:String.Format()"/> internally; custom formats should match those used for that method.</remarks>
            </summary>
            <param name="formatString">The format string, containing keys like {foo} and {foo:SomeFormat}.</param>
            <param name="replacementValueProvider">The provider for the replacement value of current key.</param>
            <param name="keyFilter">Search any key that match with this pattern.</param>
            <returns>A version of the formatString string with hastable keys replaced by (formatted) key values.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.StringInject.Inject(System.String,Xilium.Lib.Extensions.StringInject.StringInject_ReplacementFormattedValueProvider,System.String)">
            <summary>
            Extension method that replaces keys in a string with the values of matching hashtable entries.
            <remarks>Uses <see cref="!:String.Format()"/> internally; custom formats should match those used for that method.</remarks>
            </summary>
            <param name="formatString">The format string, containing keys like {foo} and {foo:SomeFormat}.</param>
            <param name="replacementFormattedValueProvider">The provider for the replacement formatted value of current key.</param>
            <param name="keyFilter">Search any key that match with this pattern.</param>
            <returns>A version of the formatString string with hastable keys replaced by (formatted) key values.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.StringInject.getPropertyHash(System.Object)">
            <summary>
            Creates a HashTable based on current object state.
            <remarks>Copied from the MVCToolkit HtmlExtensionUtility class</remarks>
            </summary>
            <param name="properties">The object from which to get the properties</param>
            <returns>A <see cref="T:System.Collections.Hashtable"/> containing the object instance's property names and their values</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Find.SimilarTo(System.String,System.String)">
            <summary>
            Restituisce un numero che indica quanto somiglia la prima stringa alla seconda.
            	- 1: le stringhe sono identiche;
            	- 0: le stringhe sono completamente diverse.
            </summary>
            <param name="baseValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Extensions.Format">
            <summary>
            Formattazione stringhe
            </summary>
        </member>
        <member name="M:Xilium.Lib.Extensions.Format.FormatCode(System.String,System.String)">
            <summary>
            Formatta un codice lungo, separando parti di esso col carattere "-".
            PS: non ricordo esattamente come funziona.
            </summary>
            <param name="value">Valore da scomporre</param>
            <param name="format">Formato di scomposizione</param>
            <returns>Restituisce il codice formattato come indicato da Format</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Format.Capitalize(System.String)">
            <summary>
            Converte la prima lettera della stringa in maiuscolo, e lascia invariato il resto.
            </summary>
            <param name="value">Testo da elaborare</param>
            <returns>Testo capitalizzato</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Format.Surround(System.String,System.String,System.String)">
            <summary>
            Se il valore è definito, aggiunge una stringa in testa ed in coda a value.
            </summary>
            <param name="value">Il valore da controllare e da inserire fra begin ed end</param>
            <param name="begin">Stringa da restituire in testa</param>
            <param name="end">Stringa da restituire in coda</param>
            <returns>Testo composto da begin+value+end, o vuoto se value non è definito</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Format.Surround(System.String,System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Se il valore è definito, aggiunge una stringa in testa ed in coda a value.
            </summary>
            <param name="value">Il valore da controllare e da inserire fra begin ed end</param>
            <param name="sbOutput">Oggetto StringBuilder su cui appendere il testo</param>
            <param name="begin">Stringa da restituire in testa</param>
            <param name="end">Stringa da restituire in coda</param>
            <returns>Testo composto da begin+value+end, o vuoto se value non è definito</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Format.Surround(System.Web.IHtmlString,System.String,System.String)">
            <summary>
            Se il valore è definito, aggiunge codice HTML in testa ed in coda a value.
            </summary>
            <param name="value">Il valore da controllare e da inserire fra begin ed end</param>
            <param name="begin">Codice HTML da restituire in testa</param>
            <param name="end">Codice HTML da restituire in coda</param>
            <returns>Codice HTML composto da begin+value+end, o vuoto se value non è definito</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Format.Surround(System.Web.IHtmlString,System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Se il valore è definito, aggiunge codice HTML in testa ed in coda a value.
            </summary>
            <param name="value">Il valore da controllare e da inserire fra begin ed end</param>
            <param name="sbOutput">Oggetto StringBuilder su cui appendere il codice HTML</param>
            <param name="begin">Codice HTML da restituire in testa</param>
            <param name="end">Codice HTML da restituire in coda</param>
            <returns>Codice HTML composto da begin+value+end, o vuoto se value non è definito</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Format.TruncatePhrase(System.String,System.Int32,System.Single,System.String)">
            <summary>
            Estrae una parte del testo, cercando di mantenere una corretta formattazione della frase:
            <para>- se il testo è corto, lo restituisce per intero;</para>
            <para>- se nei pressi del carattere [length] vi termina una frase, restituisce il testo fino alla fine di questa;</para>
            <para>- se nei pressi del carattere [length] vi termina una parola, restituisce il testo fino alla fine di questa;</para>
            <para>- in alternativa, taglia il testo a [length] e vi accoda i punti di sospensione.</para>
            <para>In ogni caso restituisce una stringa trimmata dei seguenti caratteri: '\r', '\n', ' '.</para>
            </summary>
            <param name="value">Il testo da elaborare</param>
            <param name="length">Lunghezza della stringa da restituire</param>
            <param name="tolerance">Tolleranza rispetto alla lunghezza della stringa, in percentuale; necessario per determinare la fine della frase o parola (es: 0.25 = 25%)</param>
            <param name="ellipsis">Caratteri da aggiungere qualora si dovesse rendere necessario eseguire un taglio netto del testo</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Format.TruncatePhrase(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Estrae una parte del testo, cercando di mantenere una corretta formattazione della frase:
            <para>- se il testo è corto, lo restituisce per intero;</para>
            <para>- se nei pressi del carattere [length] vi termina una frase, restituisce il testo fino alla fine di questa;</para>
            <para>- se nei pressi del carattere [length] vi termina una parola, restituisce il testo fino alla fine di questa;</para>
            <para>- in alternativa, taglia il testo a [length] e vi accoda i punti di sospensione.</para>
            <para>In ogni caso restituisce una stringa trimmata dei seguenti caratteri: '\r', '\n', ' '.</para>
            </summary>
            <param name="value">Il testo da elaborare</param>
            <param name="length">Lunghezza della stringa da restituire</param>
            <param name="tolerance">Tolleranza rispetto alla lunghezza della stringa, in numero caratteri; necessario per determinare la fine della frase o parola</param>
            <param name="ellipsis">Caratteri da aggiungere qualora si dovesse rendere necessario eseguire un taglio netto del testo</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullDateTime(System.String,System.Boolean)">
            <summary>
            Converte una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="useCurrentUICulture">Se True verrà usata la cultura UI corrente per eseguire la conversione; altrimenti verrà usata InvariantCulture.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullDateTime(System.String,System.Globalization.DateTimeStyles)">
            <summary>
            Converte una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="styles">Lo stile di conversione.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullDateTime(System.String,System.DateTimeKind)">
            <summary>
            Converte una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="kind">Il fuso orario che deve avere l'ora restituita.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullDateTime(System.String,System.Boolean,System.Globalization.DateTimeStyles)">
            <summary>
            Converte una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="useCurrentUICulture">Se True verrà usata la cultura UI corrente per eseguire la conversione; altrimenti verrà usata InvariantCulture.</param>
            <param name="styles">Lo stile di conversione.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullDateTime(System.String,System.Boolean,System.DateTimeKind)">
            <summary>
            Converte una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="useCurrentUICulture">Se True verrà usata la cultura UI corrente per eseguire la conversione; altrimenti verrà usata InvariantCulture.</param>
            <param name="kind">Il fuso orario che deve avere l'ora restituita.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullDateTime(System.String,System.Globalization.CultureInfo,System.Globalization.DateTimeStyles,System.Nullable{System.DateTimeKind})">
            <summary>
            Converte una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="cultureInfo">Oggetto Globalization.Culture da usare per eseguire la conversione.</param>
            <param name="styles">Lo stile di conversione.</param>
            <param name="kind">Il fuso orario che deve avere l'ora restituita.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullDateTimeOffset(System.String,System.Boolean)">
            <summary>
            Converte una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="useCurrentUICulture">Se True verrà usata la cultura UI corrente per eseguire la conversione; altrimenti verrà usata InvariantCulture.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullDateTimeOffset(System.String,System.Globalization.DateTimeStyles)">
            <summary>
            Converte una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="styles">Lo stile di conversione.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullDateTimeOffset(System.String,System.DateTimeKind)">
            <summary>
            Converte una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="kind">Il fuso orario che deve avere l'ora restituita.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullDateTimeOffset(System.String,System.Boolean,System.Globalization.DateTimeStyles)">
            <summary>
            Converte una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="useCurrentUICulture">Se True verrà usata la cultura UI corrente per eseguire la conversione; altrimenti verrà usata InvariantCulture.</param>
            <param name="styles">Lo stile di conversione.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullDateTimeOffset(System.String,System.Boolean,System.DateTimeKind)">
            <summary>
            Converte una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="useCurrentUICulture">Se True verrà usata la cultura UI corrente per eseguire la conversione; altrimenti verrà usata InvariantCulture.</param>
            <param name="kind">Il fuso orario che deve avere l'ora restituita.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullDateTimeOffset(System.String,System.Globalization.CultureInfo,System.Globalization.DateTimeStyles,System.Nullable{System.DateTimeKind})">
            <summary>
            Converte una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="cultureInfo">Oggetto Globalization.Culture da usare per eseguire la conversione.</param>
            <param name="styles">Lo stile di conversione.</param>
            <param name="kind">Il fuso orario che deve avere l'ora restituita.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullEnum``1(System.String,System.Boolean)">
            <summary>
            Converte il valore testuale di un Enum nel rispettivo valore tipizzato.
            </summary>
            <typeparam name="T">Tipo enum</typeparam>
            <param name="value">Valore testuale</param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNullEnum``1(System.Nullable{System.Int32})">
            <summary>
            Converte il valore numerico di un Enum nel rispettivo valore tipizzato.
            </summary>
            <typeparam name="T">Tipo enum</typeparam>
            <param name="value">Valore numerico</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullBoolean(System.String)">
            <summary>
            Tenta la conversione di una stringa in formato Boolean.
            <para>I valori ammessi per True sono: "True", "1".</para>
            <para>I valori ammessi per False sono: "False", "0".</para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullBoolean(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tenta la conversione di una stringa in formato Boolean.
            </summary>
            <param name="value"></param>
            <param name="trueValues">Elenco dei valori ammessi corrispondenti a True.</param>
            <param name="falseValues">Elenco dei valori ammessi corrispondenti a False.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullDateTime(System.String,System.Boolean)">
            <summary>
            Tenta di convertire una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="useCurrentUICulture">Se True verrà usata la cultura UI corrente per eseguire la conversione; altrimenti verrà usata InvariantCulture.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullDateTime(System.String,System.Globalization.DateTimeStyles)">
            <summary>
            Tenta di convertire una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="styles">Lo stile di conversione.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullDateTime(System.String,System.DateTimeKind)">
            <summary>
            Tenta di convertire una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="kind">Il fuso orario che deve avere l'ora restituita.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullDateTime(System.String,System.Boolean,System.Globalization.DateTimeStyles)">
            <summary>
            Tenta di convertire una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="useCurrentUICulture">Se True verrà usata la cultura UI corrente per eseguire la conversione; altrimenti verrà usata InvariantCulture.</param>
            <param name="styles">Lo stile di conversione.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullDateTime(System.String,System.Boolean,System.DateTimeKind)">
            <summary>
            Tenta di convertire una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="useCurrentUICulture">Se True verrà usata la cultura UI corrente per eseguire la conversione; altrimenti verrà usata InvariantCulture.</param>
            <param name="kind">Il fuso orario che deve avere l'ora restituita.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullDateTime(System.String,System.Globalization.CultureInfo,System.Globalization.DateTimeStyles,System.Nullable{System.DateTimeKind})">
            <summary>
            Tenta di convertire una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="cultureInfo">Oggetto Globalization.Culture da usare per eseguire la conversione.</param>
            <param name="styles">Lo stile di conversione.</param>
            <param name="kind">Il fuso orario che deve avere l'ora restituita.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullDateTimeOffset(System.String,System.Boolean)">
            <summary>
            Tenta di convertire una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="useCurrentUICulture">Se True verrà usata la cultura UI corrente per eseguire la conversione; altrimenti verrà usata InvariantCulture.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullDateTimeOffset(System.String,System.Globalization.DateTimeStyles)">
            <summary>
            Tenta di convertire una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="styles">Lo stile di conversione.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullDateTimeOffset(System.String,System.DateTimeKind)">
            <summary>
            Tenta di convertire una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="kind">Il fuso orario che deve avere l'ora restituita.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullDateTimeOffset(System.String,System.Boolean,System.Globalization.DateTimeStyles)">
            <summary>
            Tenta di convertire una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="useCurrentUICulture">Se True verrà usata la cultura UI corrente per eseguire la conversione; altrimenti verrà usata InvariantCulture.</param>
            <param name="styles">Lo stile di conversione.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullDateTimeOffset(System.String,System.Boolean,System.DateTimeKind)">
            <summary>
            Tenta di convertire una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="useCurrentUICulture">Se True verrà usata la cultura UI corrente per eseguire la conversione; altrimenti verrà usata InvariantCulture.</param>
            <param name="kind">Il fuso orario che deve avere l'ora restituita.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullDateTimeOffset(System.String,System.Globalization.CultureInfo,System.Globalization.DateTimeStyles,System.Nullable{System.DateTimeKind})">
            <summary>
            Tenta di convertire una stringa in un oggetto DateTime
            </summary>
            <param name="value">Il valore da convertire</param>
            <param name="cultureInfo">Oggetto Globalization.Culture da usare per eseguire la conversione.</param>
            <param name="styles">Lo stile di conversione.</param>
            <param name="kind">Il fuso orario che deve avere l'ora restituita.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullEnum``1(System.String,System.Boolean)">
            <summary>
            Tenta di convertire il valore testuale di un Enum nel rispettivo valore tipizzato.
            </summary>
            <typeparam name="T">Tipo enum</typeparam>
            <param name="value">Valore testuale</param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.TryNullEnum``1(System.Nullable{System.Int32})">
            <summary>
            Tenta di convertire il valore numerico di un Enum nel rispettivo valore tipizzato.
            </summary>
            <typeparam name="T">Tipo enum</typeparam>
            <param name="value">Valore numerico</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToUrlPart(System.String)">
            <summary>
            Esegue la codifica della stringa per essere usata come valore di un argomento QueryString, o semplicemente per creare parte dell'url.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.GetNullType``1(``0)">
            <summary>
            Restituisce un oggetto Type che descrive l'oggetto passato, anche se Value è Null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.GetNullType(System.Object)">
            <summary>
            Restituisce un oggetto Type che descrive l'oggetto passato, se Value non è Null.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToXPath(System.Int32)">
            <summary>
            Converte il valore numerico in formato costante Number da usarsi in una esprezzione XPath.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToXPath(System.Int64)">
            <summary>
            Converte il valore numerico in formato costante Number da usarsi in una esprezzione XPath.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToXPath(System.Double)">
            <summary>
            Converte il valore numerico in formato costante Number da usarsi in una esprezzione XPath.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToXPath(System.Decimal)">
            <summary>
            Converte il valore numerico in formato costante Number da usarsi in una esprezzione XPath.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToXPath(System.String)">
            <summary>
            Converte il valore testuale in formato costante Literal completa da usarsi in una espressione XPath.
            Cerca la presenza di caratteri ' e ", e decide quale di questi usare per il contenimento della costante.
            Se sono presenti entrambi utilizza la funzione "concat()"
            </summary>
            <param name="value">Il valore da convertire in costante Literal</param>
            <returns></returns>
            <see cref="!:http://stackoverflow.com/questions/1341847/special-character-in-xpath-query"/>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToSql(System.String,System.Boolean)">
            <summary>
            Converte una stringa dal formato codice al formato SQL.
            </summary>
            <param name="value">Il valore da convertire (se è nullo verrà restituita la stringa NULL).</param>
            <param name="addDelimiters">Se True (valore predefinito) verranno aggiunti i caratteri di delimitazione.</param>
            <returns>Restituisce il valore stringa in formato SQL.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToSqlEnum(System.Enum)">
            <summary>
            Crea le istruzioni per dichiarare un Enum in ambiente T-SQL.
            I nomi delle costanti saranno così composte:  [nomeTipoEnum]__[nomeCostanteEnum] .
            </summary>
            <param name="enumValue">Tipo Enum per cui eseguire la conversione.</param>
            <returns>Stringa con le istruzioni SQL per costruire l'oggetto Enum in ambiente T-SQL.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.String,System.Boolean,System.Char)">
            <summary>
            Converte una stringa dal formato codice in valore per JavaScript, formato JSON.
            </summary>
            <param name="value">Il valore da convertire (se è nullo verrà restituita la stringa NULL).</param>
            <param name="addDelimiters">Se True (valore predefinito) verranno aggiunti i caratteri di delimitazione.</param>
            <param name="delimiter">Carattere delimitatore di stringa.</param>
            <returns>Restituisce il valore stringa in formato JavaScript.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Web.IHtmlString,System.Boolean,System.Char)">
            <summary>
            Converte una stringa dal formato codice in valore per JavaScript, formato JSON.
            </summary>
            <param name="value">Il valore da convertire (se è nullo verrà restituita la stringa NULL).</param>
            <param name="addDelimiters">Se True (valore predefinito) verranno aggiunti i caratteri di delimitazione.</param>
            <param name="delimiter">Carattere delimitatore di stringa.</param>
            <returns>Restituisce il valore stringa in formato JavaScript.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Boolean)">
            <summary>
            Converte un valore boolean in valore per JavaScript, formato JSON.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Int32)">
            <summary>
            Converte un valore integer in valore per JavaScript, formato JSON.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Int64)">
            <summary>
            Converte un valore long integer in valore per JavaScript, formato JSON.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Decimal)">
            <summary>
            Converte un valore decimal in valore per JavaScript, formato JSON.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Double)">
            <summary>
            Converte un valore double in valore per JavaScript, formato JSON.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Single)">
            <summary>
            Converte un valore float in valore per JavaScript, formato JSON.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.DateTime)">
            <summary>
            Converte un valore datetime in valore per JavaScript, formato JSON (crea un nuovo oggetto Date).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Nullable{System.Boolean})">
            <summary>
            Converte un valore nullable boolean in valore per JavaScript, formato JSON.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Nullable{System.Int32})">
            <summary>
            Converte un valore nullable integer in valore per JavaScript, formato JSON.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Nullable{System.Int64})">
            <summary>
            Converte un valore nullable long integer in valore per JavaScript, formato JSON.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Nullable{System.Decimal})">
            <summary>
            Converte un valore nullable decimal in valore per JavaScript, formato JSON.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Nullable{System.Double})">
            <summary>
            Converte un valore nullable double in valore per JavaScript, formato JSON.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Nullable{System.Single})">
            <summary>
            Converte un valore float in valore per JavaScript, formato JSON.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJS(System.Nullable{System.DateTime})">
            <summary>
            Converte un valore nullable datetime in valore per JavaScript, formato JSON (crea un nuovo oggetto Date).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToJSEnum(System.Enum)">
            <summary>
            Crea un oggetto JavaScript che rappresenta l'oggetto TipoEnum, che dovrà essere assegnato ad una variabile.
            </summary>
            <param name="enumValue">Tipo Enum per cui eseguire la conversione.</param>
            <returns>Stringa per valorizzare un oggetto JS che sarà valorizzato con i valori dell'oggetto TipoEnum.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToUnixTime(System.DateTime)">
            <summary>
            Restituisce il valore DateTime in formato UnixTime. (vedere https://en.wikipedia.org/wiki/Unix_time)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToUnixTime(System.Nullable{System.DateTime})">
            <summary>
            Restituisce il valore DateTime in formato UnixTime. (vedere https://en.wikipedia.org/wiki/Unix_time)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToHtmlValue(System.DateTime,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converte la data-ora in un valore valido nel formato HTML5.
            Vedere tag TIME, attributo DATETIME: http://www.html5tutorial.info/html5-time.php
            Vedere documentazione W3C sul formato DATETIME: http://www.w3.org/TR/NOTE-datetime
            </summary>
            <param name="value">Valore datetime da convertire</param>
            <param name="datePart">Indica se includere la componente data</param>
            <param name="timePart">Indica se includere la componente ora</param>
            <param name="offsetPart">Indica se includere il fuso orario</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToHtmlValue(System.DateTimeOffset,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converte la data-ora in un valore valido nel formato HTML5.
            Vedere tag TIME, attributo DATETIME: http://www.html5tutorial.info/html5-time.php
            Vedere documentazione W3C sul formato DATETIME: http://www.w3.org/TR/NOTE-datetime
            </summary>
            <param name="value">Valore datetime da convertire</param>
            <param name="datePart">Indica se includere la componente data</param>
            <param name="timePart">Indica se includere la componente ora</param>
            <param name="offsetPart">Indica se includere il fuso orario</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToHtmlValue(System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Se indicato, converte la data-ora in un valore valido nel formato HTML5; in alternativa restituisce EMPTY.
            Vedere tag TIME, attributo DATETIME: http://www.html5tutorial.info/html5-time.php
            Vedere documentazione W3C sul formato DATETIME: http://www.w3.org/TR/NOTE-datetime
            </summary>
            <param name="value">Valore datetime da convertire</param>
            <param name="datePart">Indica se includere la componente data</param>
            <param name="timePart">Indica se includere la componente ora</param>
            <param name="offsetPart">Indica se includere il fuso orario</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToHtmlValue(System.Nullable{System.DateTimeOffset},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Se indicato, converte la data-ora in un valore valido nel formato HTML5; in alternativa restituisce EMPTY.
            Vedere tag TIME, attributo DATETIME: http://www.html5tutorial.info/html5-time.php
            Vedere documentazione W3C sul formato DATETIME: http://www.w3.org/TR/NOTE-datetime
            </summary>
            <param name="value">Valore datetime da convertire</param>
            <param name="datePart">Indica se includere la componente data</param>
            <param name="timePart">Indica se includere la componente ora</param>
            <param name="offsetPart">Indica se includere il fuso orario</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToCssValue(System.String)">
            <summary>
            Converte una stringa in una stringa-valore per CSS, quindi tra apici.
            <para>Es: "Ciao web" -> "'Ciao web'"; "D'altro" -> "'D\'altro'"; "Si\No" -> "'Si\\No'".</para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNameValueColl(System.String,System.Char,System.Char)">
            <summary>
            Cerca le coppie chiave-valore da una stringa e restituisce un oggetto NameValueCollection.
            </summary>
            <param name="source">Stringa sorgente.</param>
            <param name="valueDelimiter">Carattere di delimitazione fra la chiave ed il valore.</param>
            <param name="itemDelimiter">Carattere di delimitazione fra item.</param>
            <returns>Restituisce un oggetto NameValueCollection riempito con gli item trovati.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNameValueColl(System.String,System.Char,System.Char,System.Char,Xilium.Lib.Collection.Library.NameValeCollConversionOptions)">
            <summary>
            Cerca le coppie chiave-valore da una stringa e restituisce un oggetto NameValueCollection.
            </summary>
            <param name="source">Stringa sorgente.</param>
            <param name="valueDelimiter">Carattere di delimitazione fra la chiave ed il valore.</param>
            <param name="itemDelimiter">Carattere di delimitazione fra item.</param>
            <param name="valueBox">
            	Carattere di contenimento del valore, il quale può contenere qualsiasi carattere, anche i caratteri [valueDelimiter] e [itemDelimiter];
            	per rappresentare un carattere [valueBox] è sufficiente ripeterlo due volte per ogni singola occorrenza.
            </param>
            <param name="conversionOptions">Indica la o le opzioni da attivare per la valutazione di source, rendendo il parser più o meno flessibile ad imperfezioni.</param>
            <returns>Restituisce un oggetto NameValueCollection riempito con gli item trovati.</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToNameValueColl(System.String,System.Char,System.Char,System.Collections.Generic.IEnumerable{System.Char},Xilium.Lib.Collection.Library.NameValeCollConversionOptions)">
            <summary>
            Cerca le coppie chiave-valore da una stringa e restituisce un oggetto NameValueCollection.
            </summary>
            <param name="source">Stringa sorgente.</param>
            <param name="valueDelimiter">Carattere di delimitazione fra la chiave ed il valore.</param>
            <param name="itemDelimiter">Carattere di delimitazione fra item.</param>
            <param name="valueBoxes">
            	Lista di caratteri validi per il contenimento del valore; se la stringa inizia per uno di questi caratteri, il carattere di chiusura dovrà essere lo stesso.
            	La regola si ripete per ogni valore. I valori possono avere carattere di contenimento differenti.
            	La lista può essere vuota, in tal caso significa che non è previsto un carattere di contenimento.
            	Indicando un carattere di contenimento si potrà rappresentare nel valore qualsiasi carattere, anche i caratteri [valueDelimiter] e [itemDelimiter];
            	Carattere di contenimento del valore; se null significa che non è previsto; se indicato il valore può contenere qualsiasi carattere;
            	per rappresentare un carattere [valueBox] è sufficiente ripeterlo due volte per ogni singola occorrenza.
            </param>
            <param name="conversionOptions">Indica la o le opzioni da attivare per la valutazione di source, rendendo il parser più o meno flessibile ad imperfezioni.</param>
            <returns>Restituisce un oggetto NameValueCollection riempito con gli item trovati.</returns>
        </member>
        <!-- Commento XML in formato non corretto ignorato per il membro 'M:Xilium.Lib.Extensions.Convert.ToHtml(System.String)' -->
        <!-- Commento XML in formato non corretto ignorato per il membro 'M:Xilium.Lib.Extensions.Convert.InHtmlEncode(System.String)' -->
        <!-- Commento XML in formato non corretto ignorato per il membro 'M:Xilium.Lib.Extensions.Convert.InHtmlEncode(System.Web.HtmlString)' -->
        <member name="M:Xilium.Lib.Extensions.Convert.ToText(System.Web.IHtmlString)">
            <summary>
            Restituisce il plain text contenuto nei tag HTML passati.
            I tag "br" e "p" vengono convertiti con a-capo.
            </summary>
            <param name="value">Codice HTML</param>
            <returns>Testo in chiaro</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToWiki(System.String)">
            <summary>
            Trasforma il testo in codice HTML, usando il motore "DefaultWikiFormatter".
            Il testo HTML restituito sarà contenuto in un tag DIV[class="wiki"].
            </summary>
            <param name="value">Il testo da formattare</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToWiki(System.String,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Trasforma il testo in codice HTML, usando il motore "DefaultWikiFormatter".
            </summary>
            <param name="value">Il testo da formattare</param>
            <param name="options">Indica quale operazione extra dev'essere svolta sul testo HTML trasformato.</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToWiki(System.String,System.Int32)">
            <summary>
            Trasforma il testo in codice HTML, usando il motore "DefaultWikiFormatter".
            Il testo HTML restituito sarà contenuto in un tag DIV[class="wiki"].
            </summary>
            <param name="value">Il testo da formattare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToWiki(System.String,System.Int32,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Trasforma il testo in codice HTML, usando il motore "DefaultWikiFormatter".
            Il testo HTML restituito sarà contenuto in un tag DIV[class="wiki"].
            </summary>
            <param name="value">Il testo da formattare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="options">Indica quale operazione extra dev'essere svolta sul testo HTML trasformato.</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToWiki(System.String,System.Int32,System.Int32)">
            <summary>
            Trasforma il testo in codice HTML, usando il motore "DefaultWikiFormatter".
            Il testo HTML restituito sarà contenuto in un tag DIV[class="wiki"].
            </summary>
            <param name="value">Il testo da formattare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="classHeadStart">Indica il valore di partenza di inserimento dei classname "h1".."h6" sui tag H1..H6</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToWiki(System.String,System.Int32,System.Int32,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Trasforma il testo in codice HTML, usando il motore "DefaultWikiFormatter".
            Il testo HTML restituito sarà contenuto in un tag DIV[class="wiki"].
            </summary>
            <param name="value">Il testo da formattare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="classHeadStart">Indica il valore di partenza di inserimento dei classname "h1".."h6" sui tag H1..H6</param>
            <param name="options">Indica quale operazione extra dev'essere svolta sul testo HTML trasformato.</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.RemoveWiki(System.String)">
            <summary>
            Rimuove i marcatori WIKI dal testo, e restituisce il Plan-Text
            </summary>
            <param name="value">Testo in formato Textile</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.AsWiki(System.String)">
            <summary>
            Elabora il codice HTML passato eseguendo le medesime operazioni disponibili con il metodo ToWiki.
            Il testo HTML restituito sarà contenuto in un tag DIV[class="wiki"].
            </summary>
            <param name="value">Il codice HTML da elaborare</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.AsWiki(System.String,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Trasforma il testo in codice HTML, usando il motore "DefaultWikiFormatter".
            </summary>
            <param name="value">Il codice HTML da elaborare</param>
            <param name="options">Indica quale operazione extra dev'essere svolta sul testo HTML trasformato.</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.AsWiki(System.String,System.Int32)">
            <summary>
            Trasforma il testo in codice HTML, usando il motore "DefaultWikiFormatter".
            Il testo HTML restituito sarà contenuto in un tag DIV[class="wiki"].
            </summary>
            <param name="value">Il codice HTML da elaborare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.AsWiki(System.String,System.Int32,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Trasforma il testo in codice HTML, usando il motore "DefaultWikiFormatter".
            Il testo HTML restituito sarà contenuto in un tag DIV[class="wiki"].
            </summary>
            <param name="value">Il codice HTML da elaborare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="options">Indica quale operazione extra dev'essere svolta sul testo HTML trasformato.</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.AsWiki(System.String,System.Int32,System.Int32)">
            <summary>
            Trasforma il testo in codice HTML, usando il motore "DefaultWikiFormatter".
            Il testo HTML restituito sarà contenuto in un tag DIV[class="wiki"].
            </summary>
            <param name="value">Il codice HTML da elaborare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="classHeadStart">Indica il valore di partenza di inserimento dei classname "h1".."h6" sui tag H1..H6</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.AsWiki(System.String,System.Int32,System.Int32,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Trasforma il testo in codice HTML, usando il motore "DefaultWikiFormatter".
            Il testo HTML restituito sarà contenuto in un tag DIV[class="wiki"].
            </summary>
            <param name="value">Il codice HTML da elaborare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="classHeadStart">Indica il valore di partenza di inserimento dei classname "h1".."h6" sui tag H1..H6</param>
            <param name="options">Indica quale operazione extra dev'essere svolta sul testo HTML trasformato.</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToXElement(System.Exception)">
            <summary>Convert an instance of System.Exception to System.Xml.Linq.XElement.</summary>
            <param name="exception">The Exception to serialize.</param>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToXElement(System.Exception,System.Boolean)">
            <summary>Convert an instance of System.Exception to System.Xml.Linq.XElement.</summary>
            <param name="exception">The Exception to serialize.</param>
            <param name="omitStackTrace">Whether or not to serialize the Exception.StackTrace member if it's not null.</param>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToPretty(System.DateTime)">
            <summary>
            Restituisce la data in formato famigliare se prossima a oggi, altrimenti la converte in stringa
            </summary>
            <param name="date">La data da convertire.</param>
            <returns>Restituisce la data in formato stringa</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToPretty(System.DateTime,System.String)">
            <summary>
            Restituisce la data in formato famigliare se prossima a oggi, altrimenti la converte usando il formato indicato
            </summary>
            <param name="date">La data da convertire</param>
            <param name="overRangeDateTimeFormat">Il formato di conversione in stringa</param>
            <returns>La data in formato stringa</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToPretty(System.DateTime,Xilium.Lib.Format.DateTimePrettyFormat)">
            <summary>
            Restituisce la data in formato famigliare se prossima a oggi, altrimenti la converte usando il formato indicato
            </summary>
            <param name="date">La data da convertire</param>
            <param name="prettyFormat">Il formato da utilizzare per la conversione.</param>
            <returns>La data in formato stringa</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToPretty(System.DateTime,Xilium.Lib.Format.DateTimePrettyLabels)">
            <summary>
            Restituisce la data in formato famigliare se prossima a oggi, altrimenti la converte usando il formato indicato
            </summary>
            <param name="date">La data da convertire</param>
            <param name="prettyLabels">Etichette da utilizzare per la conversione.</param>
            <returns>La data in formato stringa</returns>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToPretty(System.DateTime,Xilium.Lib.Format.DateTimePrettyFormat,Xilium.Lib.Format.DateTimePrettyLabels)">
            <summary>
            Restituisce la data in formato famigliare.
            </summary>
            <param name="date">La data da convertire.</param>
            <param name="prettyFormat">Il formato da utilizzare per la conversione.</param>
            <param name="prettyLabels">Etichette da utilizzare per la conversione.</param>
            <returns>La data in formato stringa</returns>
            <remarks>
            http://dotnetperls.com/pretty-date
            http://ejohn.org/blog/javascript-pretty-date/
            </remarks>
        </member>
        <member name="M:Xilium.Lib.Extensions.Convert.ToUrlParams(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converte una collection NameValueCollection in una stringa QueryString.
            </summary>
            <param name="collection">La collection da convertire</param>
            <returns>Stringa in formato QueryString; es: "cart=123&quot;user=rossi+mario&quot;from=pages%2Farticle.html</returns>
        </member>
        <member name="T:Xilium.Lib.Format.DateTimePretty">
            <summary>
            Classe per la gestione della conversione di una data in formato familiare
            </summary>
        </member>
        <member name="P:Xilium.Lib.Format.DateTimePretty.PrettyFormat">
            <summary>
            Formato di conversione
            </summary>
        </member>
        <member name="P:Xilium.Lib.Format.DateTimePretty.PrettyLabels">
            <summary>
            Etichette in lingua
            </summary>
        </member>
        <member name="M:Xilium.Lib.Format.DateTimePretty.PrettyDate(System.DateTime)">
            <summary>
            Esegue la conversione della data in stringa in formato familiare
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Format.DateTimePretty.PrettyDate(System.DateTime,Xilium.Lib.Format.DateTimePrettyFormat,Xilium.Lib.Format.DateTimePrettyLabels)">
            <summary>
            Restituisce la data in formato famigliare.
            </summary>
            <param name="date">La data da convertire.</param>
            <param name="prettyFormat">Il formato da utilizzare per la conversione.</param>
            <param name="prettyLabels">Etichette da utilizzare per la conversione.</param>
            <returns>La data in formato stringa</returns>
            <remarks>
            http://dotnetperls.com/pretty-date
            http://ejohn.org/blog/javascript-pretty-date/
            </remarks>
        </member>
        <member name="T:Xilium.Lib.Format.DateTimePrettyFormat">
            <summary>
            Definisce i parametri di formattazione per l'esecuzione della conversione da oggetto DateTime a testo "Pretty".
            </summary>
        </member>
        <member name="F:Xilium.Lib.Format.DateTimePrettyFormat.MaxElapsedDays">
            <summary>
            Numero massimo di giorni trascorsi della data indicata per eseguire la conversione Pretty;
            oltre questo limite verrà usata la conversione tradizionale col formato "OverRangeDateTimeFormat".
            </summary>
        </member>
        <member name="F:Xilium.Lib.Format.DateTimePrettyFormat.MaxEarlyDays">
            <summary>
            Numero massimo di giorni di anticipo della data indicata per eseguire la conversione Pretty;
            oltre questo limite verrà usata la conversione tradizionale col formato "OverRangeDateTimeFormat".
            </summary>
        </member>
        <member name="F:Xilium.Lib.Format.DateTimePrettyFormat.IgnoreTimeDifferences">
            <summary>
            Se True viene ignorata la differenza dell'ora, considerando quindi solo la differenza per giorno.
            </summary>
        </member>
        <member name="F:Xilium.Lib.Format.DateTimePrettyFormat.OverRangeDateTimeFormat">
            <summary>
            Formato di conversione della data in stringa, se viene superato il limite "MaxElapsedDays" o "MaxEarlyDays".
            </summary>
        </member>
        <member name="F:Xilium.Lib.Format.DateTimePrettyFormat.DateTimeBase">
            <summary>
            Indica la data di riferimento per il calcolo; se NULL verrà usato il valore "DateTime.Now" al momento del calcolo.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Format.DateTimePrettyLabels.#ctor(System.String)">
            <summary>
            Istanzia la classe nella lingua indicata. Le variabili resteranno immutate nella lingua di default, "en-US".
            </summary>
            <param name="cultureName"></param>
        </member>
        <member name="M:Xilium.Lib.Format.DateTimePrettyLabels.GetCurrentCulture">
            <summary>
            Restituisce l'istanza della classe nella lingua CurrentCulture corrente.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Format.DateTimePrettyLabels.GetByCulture(System.String)">
            <summary>
            Restituisce l'istanza della classe nella lingua indicata.
            </summary>
            <param name="cultureName">Nome della cultura; potrebbe essere valorizzata con `System.Globalization.CultureInfo.CurrentCulture.Name`.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Format.DateTimePrettyLabels.GetLabel(Xilium.Lib.Format.DateTimePrettyDirectionEnum,Xilium.Lib.Format.DateTimePrettyAbsDistanceEnum)">
            <summary>
            Restituisce la Label corrispondente ai parametri indicati
            </summary>
            <param name="direction">Direzione della label, passata (es. "5 giorni fa") o futura (es. "fra 5 giorni")</param>
            <param name="distance">Distanza rispetto ad oggi, es. "1 minuto", "N ore"</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Environment.Hardware.ProcessorId">
            <summary>
            Restituisce il valore Id della prima CPU
            </summary>
            <returns>Valore Id della prima CPU</returns>
        </member>
        <member name="M:Xilium.Lib.Environment.Hardware.ProcessorIds">
            <summary>
            Restituisce un array con i valori Id delle CPU rilevate nel sistema, ovvero quelle riconosciute dal sistema operativo.
            </summary>
            <returns>Array di tipo string contenente i valori Id delle CPU riconosciute dal sistema operativo.</returns>
        </member>
        <member name="T:Xilium.Lib.Globalization.CultureInfo">
            <summary>
            Offre metodi per la selezione e gestione del `CultureInfo` di un software.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Globalization.CultureInfo.BestCultureName(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Restituisce il nome cultura più idoneo per l'utente.
            </summary>
            <param name="availableCultureList">Elenco lingue disponibili sul software</param>
            <param name="clientCultureName">Lingua del client (se NULL verrà usato CurrentUICulture.Name)</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.CultureInfo.BestCultureName(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Restituisce il nome cultura più idoneo per l'utente.
            Nel caso in cui non sia disponibile sul software una lingua idonea per l'utente, la funzione restituirà la lingua <paramref name="fallbackCultureName"/>.
            </summary>
            <param name="availableCultureList">Elenco lingue disponibili sul software</param>
            <param name="clientCultureName">Lingua del client (se NULL verrà usato CurrentUICulture.Name)</param>
            <param name="fallbackCultureName">Lingua di default; deve corrispondere a una lingua.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.CultureInfo.BestCultureName(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Restituisce il nome cultura più idoneo per l'utente.
            </summary>
            <param name="availableCultureList">Elenco lingue disponibili sul software</param>
            <param name="clientCultureNames">Elenco lingue preferite dal client, nel formato UserLanguage: "it-IT[?q=0.8]". Nota: se NULL verrà usato CurrentUICulture.Name</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.CultureInfo.BestCultureName(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Restituisce il nome cultura più idoneo per l'utente.
            Nel caso in cui non sia disponibile sul software una lingua idonea per l'utente, la funzione restituira la lingua <paramref name="fallbackCultureName"/>.
            </summary>
            <param name="availableCultureList">Elenco lingue disponibili sul software</param>
            <param name="clientCultureNames">Elenco lingue preferite dal client, nel formato UserLanguage: "it-IT[?q=0.8]". Nota: se NULL verrà usato CurrentUICulture.Name</param>
            <param name="fallbackCultureName">Lingua di default; deve corrispondere a una lingua.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.CultureInfo.BestLocalizedSource``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Data una lista localizzata di risorse, restituisce la risorsa più idonea per il client richiedente.
            <para>Il metodo ricerca la risorsa più idonea dalla lista <paramref name="availableLocalizedSources"/>, cercando quella localizzata in lingua <paramref name="clientCultureName"/>.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="availableLocalizedSources">Elenco risorse localizzate.</param>
            <param name="source2cultureNameDelegate">Metodo che estrae la lingua da una determinata risorsa.</param>
            <param name="clientCultureName">Lingua del client (se NULL verrà usato CurrentUICulture.Name)</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.CultureInfo.BestLocalizedSource``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.String)">
            <summary>
            Data una lista localizzata di risorse, restituisce la risorsa più idonea per il client richiedente.
            <para>Il metodo ricerca la risorsa più idonea dalla lista <paramref name="availableLocalizedSources"/>, cercando quella localizzata in lingua <paramref name="clientCultureName"/>.</para>
            <para>Nel caso non sia disponibile una risorsa idonea, verrà restituita quella localizzata in <paramref name="fallbackCultureName"/>.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="availableLocalizedSources">Elenco risorse localizzate.</param>
            <param name="source2cultureNameDelegate">Metodo che estrae la lingua da una determinata risorsa.</param>
            <param name="clientCultureName">Lingua del client (se NULL verrà usato CurrentUICulture.Name)</param>
            <param name="fallbackCultureName">Lingua di default; deve corrispondere alla lingua di una risorsa.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.CultureInfo.BestLocalizedSource``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Data una lista localizzata di risorse, restituisce la risorsa più idonea per il client richiedente.
            <para>Il metodo ricerca la risorsa più idonea dalla lista <paramref name="availableLocalizedSources"/>, cercando quella localizzata in una lingua <paramref name="clientCultureNames"/>.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="availableLocalizedSources">Elenco risorse localizzate.</param>
            <param name="source2cultureNameDelegate">Metodo che estrae la lingua da una determinata risorsa.</param>
            <param name="clientCultureNames">Elenco lingue preferite dal client, nel formato UserLanguage: "it-IT[?q=0.8]". Nota: se NULL verrà usato CurrentUICulture.Name</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.CultureInfo.BestLocalizedSource``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Data una lista localizzata di risorse, restituisce la risorsa più idonea per il client richiedente.
            <para>Il metodo ricerca la risorsa più idonea dalla lista <paramref name="availableLocalizedSources"/>, cercando quella localizzata in una lingua <paramref name="clientCultureNames"/>.</para>
            <para>Nel caso non sia disponibile una risorsa idonea, verrà restituita quella localizzata in <paramref name="fallbackCultureName"/>.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="availableLocalizedSources">Elenco risorse localizzate.</param>
            <param name="source2cultureNameDelegate">Metodo che estrae la lingua da una determinata risorsa.</param>
            <param name="clientCultureNames">Elenco lingue preferite dal client, nel formato UserLanguage: "it-IT[?q=0.8]". Nota: se NULL verrà usato CurrentUICulture.Name</param>
            <param name="fallbackCultureName">Lingua di default; deve corrispondere alla lingua di una risorsa.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.CultureInfo.CultureInfoNameEqualParts(System.String,System.String,System.Boolean,System.StringComparison)">
            <summary>
            Confronta 2 cultureInfoName. Restituisce un valore percentuale che indica il numero di parti coincidenti.
            <para>Restituisce 2 se sono identiche (es: en-US == en-US).</para>
            <para>Restituisce 1 se tutte le parti del cultureInfoNameA corrispondono alle medesime parti di cultureInfoNameB (es: en == en-US).</para>
            <para>
                Restituisce un numero fra 0 e 1 se solo alcune parti sono uguali, il numero rappresenta la percentuale di parti di cultureInfoNameA trovate in cultureInfoNameB
                (es: en-US == en-GB-eng restituisce 0.5 perchè in en-US solo "en" è in match, quindi 1 su 2 parti).
            </para>
            <para>Restituisce 0 in tutti gli altri casi.</para>
            </summary>
            <param name="cultureInfoNameA">Valore da confrontare con `cultureInfoNameB`</param>
            <param name="cultureInfoNameB">Valore di riferimento</param>
            <param name="sort">Se True indica che il confronto non sarà fra cultureInfoNameA verso cultureInfoNameB, ma fra la più corta verso la più lunga.</param>
            <param name="stringComparison">metodo di confronto fra le parti `cultureInfoName`</param>
            <returns></returns>
        </member>
        <member name="F:Xilium.Lib.Globalization.CultureInfo.CultureInfoNamePartsPattern">
            <summary>
            Restituisce il Pattern per separare il CultureInfoName (es: it-IT) in parti.
            </summary>
        </member>
        <member name="T:Xilium.Lib.Globalization.CultureInfo.CultureInfoNameEqualPartsResults">
            <summary>
            Elenco di possibili risultati del metodo `CultureInfoNameEqualParts` 
            </summary>
        </member>
        <member name="F:Xilium.Lib.Globalization.CultureInfo.CultureInfoNameEqualPartsResults.NoMatch">
            <summary>
            Match non verificato, i cultureInfoName sono diversi.
            </summary>
        </member>
        <member name="F:Xilium.Lib.Globalization.CultureInfo.CultureInfoNameEqualPartsResults.MinimalMatch">
            <summary>
            Match verificato per almeno una parte.
            </summary>
        </member>
        <member name="F:Xilium.Lib.Globalization.CultureInfo.CultureInfoNameEqualPartsResults.GoodMatch">
            <summary>
            Match verificato al 100%
            </summary>
        </member>
        <member name="F:Xilium.Lib.Globalization.CultureInfo.CultureInfoNameEqualPartsResults.MaximumMatch">
            <summary>
            Match verificato al 100%, i cultureInfoName sono identici.
            </summary>
        </member>
        <member name="F:Xilium.Lib.Globalization.DateTime.__westEuropeTimeZone">
            <summary>
            Lista dei valori TIME ZONE INFO:
            http://remy.supertext.ch/2012/04/the-net-timezoneinfo-getsystemtimezones-list/
            </summary>
        </member>
        <member name="P:Xilium.Lib.Globalization.DateTime.WestEuropeTimeZone">
            <summary>
            Restituisce l'oggetto TimeZone per "Europa Occidentale", di cui fa parte anche l'Italia.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Globalization.DateTime.UTCTimeZone">
            <summary>
            Restituisce l'oggetto TimeZone per il sistema UTC, corrispondente all'orario internazionale.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Globalization.DateTime.ServerLocationTimeZone">
            <summary>
            Restituisce l'oggetto TimeZone usato dal server web in uso.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Globalization.DateTime.TodayOnWestEurope">
            <summary>
            Restituisce la data di oggi, secondo il TimeZone dell'Europa Occidentale, di cui fa parte anche l'Italia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.DateTime.TodayOnUTC">
            <summary>
            Restituisce la data di oggi, secondo il TimeZone UTC, corrispondente all'orario internazionale.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.DateTime.TodayOnServerLocation">
            <summary>
            Restituisce la data di oggi, secondo il TimeZone del server web.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.DateTime.TodayOn(System.TimeZoneInfo)">
            <summary>
            Restituisce la data di oggi, secondo il TimeZone passato per argomento.
            </summary>
            <param name="timeZoneInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.DateTime.NowOnWestEurope">
            <summary>
            Restituisce la data e l'ora di adesso, secondo il TimeZone dell'Europa Occidentale, di cui fa parte anche l'Italia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.DateTime.NowOnUTC">
            <summary>
            Restituisce la data e l'ora di adesso, secondo il TimeZone UTC, corrispondente all'orario internazionale.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.DateTime.NowOnServerLocation">
            <summary>
            Restituisce la data e l'ora di adesso, secondo il TimeZone del server web.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Globalization.DateTime.NowOn(System.TimeZoneInfo)">
            <summary>
            Restituisce la data e l'ora di adesso, secondo il TimeZone passato per argomento.
            </summary>
            <param name="timeZoneInfo">TimeZone per cui ottenere l'orario di adesso.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.IO.Path.PathBuilder(System.String)">
            <summary>
            Replaces the placeholders with their values.
            <para>The placeholder may refer to: "Environment", "AssemblyInfo" or "CurrentDomain".</para>
            <para>To require the value of Environment collection item use: "{Env.APPDATA}\Folder".</para>
            <para>To require the value of AssemblyInfo collection item use: "C:\MyApps\{Asm.Company}\Folder".</para>
            <para>To require the value of CurrentDomain collection item use: "C:\MyApps\{Dom.FriendlyName}\Folder".</para>
            <para>To require the list of available items use: "{&lt;collection&gt;.?}".</para>
            <para>To require the list of available items with values use: "{&lt;collection&gt;.??}".</para>
            </summary>
            <param name="path">The path to elaborate.</param>
            <returns>Returns the path compiled with values of placeholder found.</returns>
        </member>
        <member name="T:Xilium.Lib.Math.Base.BaseSystem">
            <summary>
            Rappresenta un sistema di base numerica. La base del nuovo sistema è definita traminte la proprietà Symbols.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.#ctor(Xilium.Lib.Math.Base.CommonBaseSystems)">
            <summary>
            Istanzia un nuovo sistema numerico, utilizzando il sistema comune dichiarato
            </summary>
            <param name="commonBaseSystem"></param>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.#ctor(Xilium.Lib.Math.Base.CommonBaseSystems,System.Char,System.Int32,System.Boolean)">
            <summary>
            Istanzia un nuovo sistema numerico, utilizzando il sistema comune dichiarato
            </summary>
            <param name="commonBaseSystem"></param>
            <param name="leftFillChar">Carattere di riempimento a sinistra</param>
            <param name="minLength">Lunghezza minima</param>
            <param name="signRequired">Se True il segno deve essere sempre presente</param>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.#ctor(System.String)">
            <summary>
            Istanzia un nuovo sistema numerico, senza indicare i parametri di riempimento (vedere `SetFill`).
            </summary>
            <param name="symbols">Simboli del sistema numerico</param>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.#ctor(System.String,System.Nullable{Xilium.Lib.Math.Base.Support.SymbolComparisonEnum})">
            <summary>
            Istanzia un nuovo sistema numerico, senza indicare i parametri di riempimento (vedere `SetFill`).
            </summary>
            <param name="symbols">Simboli del sistema numerico</param>
            <param name="symbolComparison">Sistema di confronto dei simboli</param>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.#ctor(System.String,System.Char,System.Int32,System.Nullable{Xilium.Lib.Math.Base.Support.SymbolComparisonEnum})">
            <summary>
            Istanzia un nuovo sistema numerico.
            </summary>
            <param name="symbols">Simboli del sistema numerico</param>
            <param name="leftFillChar">Carattere di riempimento a sinistra</param>
            <param name="minLength">Lunghezza minima</param>
            <param name="symbolComparison">Sistema di confronto dei simboli</param>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.#ctor(System.String,System.Char,System.Int32,System.Char,System.Char,System.Boolean,System.Nullable{Xilium.Lib.Math.Base.Support.SymbolComparisonEnum})">
            <summary>
            Istanzia un nuovo sistema numerico.
            </summary>
            <param name="symbols">Simboli del sistema numerico</param>
            <param name="leftFillChar">Carattere di riempimento a sinistra</param>
            <param name="minLength">Lunghezza minima</param>
            <param name="positiveSymbol">Carattere di identificazione del valore positivo</param>
            <param name="negativeSymbol">Carattere di identificazione del valore negativo</param>
            <param name="signRequired">Se True il segno deve essere sempre presente</param>
            <param name="symbolComparison">Sistema di confronto dei simboli</param>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseSystem.Symbols">
            <summary>
            Simboli del sistema numerico
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseSystem.Base">
            <summary>
            Base del sistema numerico (es. 2 per binario, 10 per decimale, 16 per esadecimale)
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseSystem.SymbolComparison">
            <summary>
            Metodo di confronto
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseSystem.PositiveSymbol">
            <summary>
            Carattere per identificare il valore positivo
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseSystem.NegativeSymbol">
            <summary>
            Carattere per identificare il valore negativo
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseSystem.SignRequired">
            <summary>
            Indica se il segno è obbligatorio
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseSystem.LeftFillChar">
            <summary>
            Carattere di riempimento
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseSystem.MinLength">
            <summary>
            Lunghezza da raggiungere (carattere di segno escluso)
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.SetFill(System.Char,System.Int32)">
            <summary>
            Setta i parametri di riempimento
            </summary>
            <param name="leftFillChar">Carattere di riempimento</param>
            <param name="minLength">Lunghezza minima da raggiungere</param>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.Clone">
            <summary>
            Crea un nuovo oggetto BaseSystem copiando tutti i parametri dell'oggetto corrente
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.IsPositiveValue(Xilium.Lib.Math.Base.BaseNumber)">
            <summary>
            Indica se il valore è maggiore di zero
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.IsPositiveValue(System.String)">
            <summary>
            Indica se il valore è maggiore di zero
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.IsPositiveValue(System.Text.StringBuilder)">
            <summary>
            Indica se il valore è maggiore di zero
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.IsNegativeValue(Xilium.Lib.Math.Base.BaseNumber)">
            <summary>
            Indica se il valore è minore di zero
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.IsNegativeValue(System.String)">
            <summary>
            Indica se il valore è minore di zero
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.IsNegativeValue(System.Text.StringBuilder)">
            <summary>
            Indica se il valore è minore di zero
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.IsZeroValue(Xilium.Lib.Math.Base.BaseNumber)">
            <summary>
            Indica se il valore è uguale a zero
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.IsZeroValue(System.String)">
            <summary>
            Indica se il valore è uguale a zero
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.IsZeroValue(System.Text.StringBuilder)">
            <summary>
            Indica se il valore è uguale a zero
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.HasValue(Xilium.Lib.Math.Base.BaseNumber)">
            <summary>
            Indica se il valore è presente
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.HasValue(System.String)">
            <summary>
            Indica se il valore è presente
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseSystem.HasValue(System.Text.StringBuilder)">
            <summary>
            Indica se il valore è presente
            </summary>
        </member>
        <member name="T:Xilium.Lib.Math.Base.BaseNumber">
            <summary>
            Rappresenta un numero in un sistema a base arbitrario.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseNumber.#ctor(Xilium.Lib.Math.Base.BaseSystem)">
            <summary>
            Crea un nuovo oggetto BaseNumber senza impostare un valore
            </summary>
            <param name="baseSystem"></param>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseNumber.#ctor(Xilium.Lib.Math.Base.BaseSystem,System.Nullable{System.Int64})">
            <summary>
            Crea un nuovo oggetto BaseNumber impostando un valore in base 10
            </summary>
            <param name="baseSystem"></param>
            <param name="longValue"></param>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseNumber.#ctor(Xilium.Lib.Math.Base.BaseSystem,System.String)">
            <summary>
            Crea un nuovo oggetto BaseNumber impostando un valore in base BaseSystem
            </summary>
            <param name="baseSystem"></param>
            <param name="baseValue"></param>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseNumber.BaseSystem">
            <summary>
            Sistema di numerazione a cui appartiene il numero
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseNumber.IsPositive">
            <summary>
            Indica se il valore è maggiore di zero
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseNumber.IsNegative">
            <summary>
            Indica se il valore è maggiore di zero
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseNumber.IsZero">
            <summary>
            Indica se il valore è maggiore di zero
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseNumber.HasValue">
            <summary>
            Indica se il valore è maggiore di zero
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseNumber.LongValue">
            <summary>
            Rappresenta il numero in base 10.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Base.BaseNumber.BaseValue">
            <summary>
            Rappresenta il numero nella base corrente BaseSystem.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseNumber.SetParsedValue(System.String)">
            <summary>
            Setta la proprietà Value rimuovendo dalla stringa passata i caratteri non validi.
            </summary>
            <param name="value">Il valore da ripulire per settare la proprietà Value.</param>
            <returns>Restituisce il numero di caratteri riconosciuti come validi.</returns>
        </member>
        <member name="M:Xilium.Lib.Math.Base.BaseNumber.ToBaseInBlock(Xilium.Lib.Math.Base.BaseSystem)">
            <summary>
            Converte il valore corrente nella nuova base, elaborando i dati a blocchi.
            Il risultato potrebbe non essere una corretta conversione, ma con questa funzione è possibile convertire anche valori composti da molti byte, come un file.
            ATTENZIONE: è possibile che la base fonte e la base destinazione non siano compatibili fra loro (sarebbero necessari tipi numerici con troppi byte).
            </summary>
            <param name="toBaseSystem">Sistema numerico di destinazione.</param>
            <returns>Restituisce il valore corrente nella base indicata dall'argomento ToChars.</returns>
        </member>
        <member name="T:Xilium.Lib.Math.Base.CommonBaseSystems">
            <summary>
            Definizioni comuni di sistemi numerici
            </summary>
        </member>
        <member name="T:Xilium.Lib.Math.Base.Support.SymbolComparisonEnum">
            <summary>
            Sistema di confronto
            </summary>
        </member>
        <member name="T:Xilium.Lib.Math.Operator">
            <summary>
            Operatori per eseguire le operazioni con i numeri usando i Generics.
            <para>Tipi valore supportati:</para>
            <para>- Numeri interi</para>
            <para>	- int</para>
            <para>	- long</para>
            <para>- Virgola mobile</para>
            <para>	- float</para>
            <para>	- double</para>
            <para>- Virgola fissa</para>
            <para>	- decimal</para>
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Operator.ChangeType``1(System.Object)">
            <summary>
            Converte il valore numerico nel tipo specificato
            </summary>
            <typeparam name="T">Tipo di destinazione</typeparam>
            <param name="value">Valore numerico da convertire</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Operator.TryParse``1(System.String,``0@)">
            <summary>
            Tenta di convertire un numero in forma stringa nel tipo struct T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Operator.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>
            Tenta di convertire un numero in forma stringa nel tipo struct T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="useCurrentUICulture">Indica se usare l'oggetto CurrentUiCulture per eseguire la conversione</param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Operator.Add``3(``0,``1)">
            <summary>
            Esegue la somma aritmetica fra due numeri generici
            </summary>
            <typeparam name="Ta"></typeparam>
            <typeparam name="Tb"></typeparam>
            <typeparam name="Tr"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Operator.Subtract``3(``0,``1)">
            <summary>
            Esegue la sottrazione aritmetica fra due numeri generici
            </summary>
            <typeparam name="Ta"></typeparam>
            <typeparam name="Tb"></typeparam>
            <typeparam name="Tr"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Operator.Multiply``3(``0,``1)">
            <summary>
            Esegue la moltiplicazione aritmetica fra due numeri generici
            </summary>
            <typeparam name="Ta"></typeparam>
            <typeparam name="Tb"></typeparam>
            <typeparam name="Tr"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Operator.Divide``3(``0,``1)">
            <summary>
            Esegue la divisione aritmetica fra due numeri generici
            </summary>
            <typeparam name="Ta"></typeparam>
            <typeparam name="Tb"></typeparam>
            <typeparam name="Tr"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Operator.Mod``3(``0,``1)">
            <summary>
            Restituisce il resti della divisione aritmetica eseguita sui numeri generici
            </summary>
            <typeparam name="Ta"></typeparam>
            <typeparam name="Tb"></typeparam>
            <typeparam name="Tr"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.Um">
            <summary>
            Unità di misura del valore
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.Value">
            <summary>
            Valore nell'unità di misura e nel prefisso indicato.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.AbsoluteValue">
            <summary>
            Valore assoluto del numero.
            <para>Restituisce `Value` espresso in unità.</para>
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.Prefix">
            <summary>
            Indica il prefisso dell'unità di misura (es. "m" per "milli", "k" per "kilo", "M" per "mega").
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToPrefix(Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore in un nuovo prefisso
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToPrefix``1(Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore in un nuovo prefisso
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToUnitPrefix">
            <summary>
            Converte il valore nel prefisso unità
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToUnitPrefix``1">
            <summary>
            Converte il valore nel prefisso unità
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ValueToPrefix(Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore numerico in un nuovo prefisso
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ValueToPrefix``1(Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore numerico in un nuovo prefisso
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ValueToUnitPrefix">
            <summary>
            Converte il valore numerico nel prefisso unità
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ValueToUnitPrefix``1">
            <summary>
            Converte il valore numerico nel prefisso unità
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.BestPrefix">
            <summary>
            Restituisce il prefisso più opportuno per rappresentare il valore numerico; utilizza il valore di soglia `1.222`.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.BestPrefix(`0)">
            <summary>
            Restituisce il prefisso più opportuno per rappresentare il valore numerico.
            </summary>
            <param name="triggerValue">
            	Valore di soglia per il cambio di prefisso:
            	il valore del numero sovrà essere superiore o uguale alla soglia nel prefisso restituito, e inferiore nel prefisso successivo.
            	<example>Esempio: con `triggerValue = 1.222`, il valore `1200300 Byte` sarà convertito in `1200.3 KByte`, mentre `1234567 Byte` sarà convertito in `1.234567 MByte`</example>
            </param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.BestPrefix(Xilium.Lib.Math.Um.UmPrefixItem,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Restituisce il prefisso più opportuno per rappresentare il valore numerico.
            </summary>
            <param name="triggerValue">
            	Valore di soglia per il cambio di prefisso:
            	il valore del numero sovrà essere superiore o uguale alla soglia nel prefisso restituito, e inferiore nel prefisso successivo.
            	<example>Esempio: con `triggerValue = 1.222`, il valore `1200300 Byte` sarà convertito in `1200.3 KByte`, mentre `1234567 Byte` sarà convertito in `1.234567 MByte`</example>
            </param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.BestPrefix(`0,Xilium.Lib.Math.Um.UmPrefixItem,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Restituisce il prefisso più opportuno per rappresentare il valore numerico.
            </summary>
            <param name="triggerValue">
            	Valore di soglia per il cambio di prefisso:
            	il valore del numero dovrà essere superiore o uguale alla soglia nel prefisso restituito, e inferiore nel prefisso successivo.
            	<example>Esempio: con `triggerValue = 1.222`, il valore `1200300 Byte` sarà convertito in `1200.3 KByte`, mentre `1234567 Byte` sarà convertito in `1.234567 MByte`</example>
            	Il valore di soglia dovrà essere maggiore di 0.
            </param>
            <param name="minPrefix">Limite inferiore di restituzione Prefix (prefisso con Scale minore)</param>
            <param name="maxPrefix">Limite superiore di restituzione Prefix (prefisso con Scale maggiore)</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToUm(Xilium.Lib.Math.Um.UmDefinition)">
            <summary>
            Converte il valore in una nuova UM
            </summary>
            <param name="um">La nuova unità di misura</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToUm``1(Xilium.Lib.Math.Um.UmDefinition)">
            <summary>
            Converte il valore in una nuova UM
            </summary>
            <param name="um">La nuova valuta</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToUm(Xilium.Lib.Math.Um.UmDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore in una nuova UM
            </summary>
            <param name="um">La nuova unità di misura</param>
            <param name="prefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToUm``1(Xilium.Lib.Math.Um.UmDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore in una nuova UM
            </summary>
            <param name="um">La nuova valuta</param>
            <param name="prefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ValueToUm(Xilium.Lib.Math.Um.UmDefinition)">
            <summary>
            Converte il valore nella nuova UM
            </summary>
            <param name="um">La nuova unità di misura</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ValueToUm(Xilium.Lib.Math.Um.UmDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore nella nuova UM
            </summary>
            <param name="um">La nuova unità di misura</param>
            <param name="prefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ValueToUm``1(Xilium.Lib.Math.Um.UmDefinition)">
            <summary>
            Converte il valore nella nuova UM
            </summary>
            <param name="um">La nuova unità di misura</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ValueToUm``1(Xilium.Lib.Math.Um.UmDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore nella nuova UM
            </summary>
            <param name="um">La nuova unità di misura</param>
            <param name="prefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToString">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToString(System.String)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="format">Formato di conversione del numero in stringa (vedere IUmNumberFormatProvider.StringFormat).</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToString(Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToString(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="format">Formato di conversione del numero in stringa (vedere IUmNumberFormatProvider.StringFormat).</param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToBestString">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToBestString(`0)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="triggerValue">Valore di soglia per il cambio di prefisso (vedere metodo BestPrefix)</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToBestString(System.String)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="format">
            	Formato del Prefix combinato con UM; usare il segnaposto "p" per il prefisso, e "u" per l'unità di misura (vedere metodo `ToString`).
            </param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToBestString(`0,System.String)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="triggerValue">Valore di soglia per il cambio di prefisso (vedere metodo BestPrefix)</param>
            <param name="format">
            	Formato del Prefix combinato con UM; usare il segnaposto "p" per il prefisso, e "u" per l'unità di misura (vedere metodo `ToString`).
            </param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToBestString(Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToBestString(`0,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="triggerValue">Valore di soglia per il cambio di prefisso (vedere metodo BestPrefix)</param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToBestString(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="format">
            	Formato del Prefix combinato con UM; usare il segnaposto "p" per il prefisso, e "u" per l'unità di misura (vedere metodo `ToString`).
            </param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.ToBestString(`0,System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="triggerValue">Valore di soglia per il cambio di prefisso (vedere metodo BestPrefix)</param>
            <param name="format">
            	Formato del Prefix combinato con UM; usare il segnaposto "p" per il prefisso, e "u" per l'unità di misura (vedere metodo `ToString`).
            </param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.UmToString">
            <summary>
            Restituisce l'unità di misura (comprensiva di prefisso) sottoforma di stringa
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.UmToString(System.String)">
            <summary>
            Restituisce l'unità di misura (comprensiva di prefisso) sottoforma di stringa
            </summary>
            <param name="format">Formato di conversione dell'unità di misura in stringa (vedere IUmNumberFormatProvider.UmStringFormat).</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.UmToString(Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Restituisce l'unità di misura (comprensiva di prefisso) sottoforma di stringa
            </summary>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumber`1.UmToString(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Restituisce l'unità di misura (comprensiva di prefisso) sottoforma di stringa
            </summary>
            <param name="format">Formato di conversione dell'unità di misura in stringa (vedere IUmNumberFormatProvider.UmStringFormat).</param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Math.Um.Contracts.IUmNumberFormattable">
            <summary>
            Definisce un oggetto convertibile tramite i metodi `IUmNumberFormatProvider.FormatToString` e `IUmNumberFormatProvider.FormatToHtml`.
            </summary>
        </member>
        <member name="T:Xilium.Lib.Math.Um.Contracts.IUmSizeEvents">
            <summary>
            Interfaccia per l'esecuzione di codice su creazione di un oggetto UmSize.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmSizeEvents.OnCreating(Xilium.Lib.Math.Um.UmSize)">
            <summary>
            Invocazione metodo su inizio creazione della nuova istanza.
            </summary>
            <param name="umSize"></param>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmSizeEvents.OnCreated(Xilium.Lib.Math.Um.UmSize)">
            <summary>
            Invocazione metodo su conclusione preparazione della nuova istanza
            </summary>
            <param name="umSize"></param>
        </member>
        <member name="T:Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider">
            <summary>
            Rappresenta un formattatore di oggetti UmNumber
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider.NumberFormat">
            <summary>
            Provider di formattazione numero
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider.ValueStringFormat">
            <summary>
            Formato di conversione della parte numerica in stringa
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider.UmStringFormat">
            <summary>
            Formato di conversione della parte UM in stringa.
            <para>Formato del Prefix combinato con UM; usare il segnaposto "p" per il prefisso, e "u" per l'unità di misura:</para>
            <para>- p:	prefisso formato breve, restituisce il valore `Symbol` del prefisso (es "m" di "milli")</para>
            <para>- pp:	prefisso formato esteso, restituisce il valore `Alias` del prefisso (es "milli")</para>
            <para>- u:  UM formato breve, restituisce il valore `Symbol` dell'unità di misura (es "B")</para>
            <para>- uu: UM formato esteso, restituisce il valore `Alias` dell'unità di misura (es "Byte")</para>
            <example>Es: "pu" > "kB" ;  "puu" > "kByte"</example>
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider.StringFormat">
            <summary>
            Formato di conversione in stringa.
            <para>Combinare la formattazione del numero con la formattazione dell'unità di misura (vedere `UmStringFormat`).</para>
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider.FormatUmNumberToString(System.String,System.Object[])">
            <summary>
            Esegue la formattazione della stringa secondo il formato passato, e sostituendo i segnaposto con i parametri.
            <para>Da utilizzare in alternativa a `string.Format` per la conversione di oggetti UmNumber</para>
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider.JoinFormats(System.String[])">
            <summary>
            Combina più formati in uno solo.
            </summary>
            <param name="formats">Elenco di formati da combinare</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider.JoinFormats(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combina più formati in uno solo.
            </summary>
            <param name="formats">Elenco di formati da combinare</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider.SplitFormats(System.String)">
            <summary>
            Separa una stringa combinedFormats nei sottoformati.
            <para>Se la stringa passata non dovesse contenere separatori di formato, allora verrà restituito un solo elemento con il valore stesso dell'argomento.</para>
            </summary>
            <param name="combinedFormats"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Math.Um.Contracts.UmSizeOfUmDefinitionAttribute">
            <summary>
            Applicato su una classe UmDefinition, dichiara la dimensione fisica (UmSize) di appartenenza dell'UM.
            </summary>
        </member>
        <member name="T:Xilium.Lib.Math.Um.StandardPrefix.SiSmallDecimalUmPrefixSystem">
            <summary>
            http://it.wikipedia.org/wiki/Sistema_internazionale_di_unit%C3%A0_di_misura#Prefissi
            </summary>
        </member>
        <member name="T:Xilium.Lib.Math.Um.StandardPrefix.SiBinaryUmPrefixSystem">
            <summary>
            http://it.wikipedia.org/wiki/Prefissi_per_multipli_binari
            </summary>
        </member>
        <member name="T:Xilium.Lib.Math.Um.StandardPrefix.SiDecimalUmPrefixSystem">
            <summary>
            http://it.wikipedia.org/wiki/Sistema_internazionale_di_unit%C3%A0_di_misura#Prefissi
            </summary>
        </member>
        <member name="T:Xilium.Lib.Math.Um.StandardSize.PureUmSize">
            <summary>
            Unità di misura da applicare a numeri privi di "unità di misura". I numeri senza UM si dicono "numeri puri" o "adimensionali".
            </summary>
        </member>
        <member name="T:Xilium.Lib.Math.Um.UmFlexNumber`1">
            <summary>
            Rappresenta un numero, potenzialmente con unità di misura e prefisso, privo (al contrario di UmNumber) di sistemi vincolanti di legami con oggetti dipendenti.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.#ctor(`0,System.String)">
            <summary>
            Istanzia un nuovo numero partendo dalla definizione testuale
            </summary>
            <param name="blobValue"></param>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParse(System.String,Xilium.Lib.Math.Um.UmFlexNumber{`0}@)">
            <summary>
            Tenta il riconoscimento del numero e um all'interno del valore testuale.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="blobValue"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmFlexNumber`1.Value">
            <summary>
            Restituisce la componente numerica del numero
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmFlexNumber`1.UmString">
            <summary>
            Valore dell'unità di misura, con eventuale prefisso
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.ToString">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.ToString(System.String)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="format">
            	Formato del numero e UM; usare il segnaposto "u" per indicare la posizione dell'unità di misura.
            	<example>Es: "0.00u"</example>
            </param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.ToString(System.IFormatProvider)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="format">
            	Formato del numero e UM; usare il segnaposto "u" per indicare la posizione dell'unità di misura.
            	<example>Es: "0.00u"</example>
            </param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParseUm(Xilium.Lib.Math.Um.UmDefinition@,Xilium.Lib.Math.Um.UmPrefixItem@)">
            <summary>
            Cerca la coppia UM e Prefix più appropriata; restituisce True se viene trovata.
            </summary>
            <param name="resultUm">UM trovato</param>
            <param name="resultPrefix">PrefixItem trovato</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParseUm(System.Collections.Generic.IEnumerable{Xilium.Lib.Math.Um.UmDefinition},Xilium.Lib.Math.Um.UmDefinition@,Xilium.Lib.Math.Um.UmPrefixItem@)">
            <summary>
            Cerca la coppia UM e Prefix più appropriata; restituisce True se viene trovata.
            </summary>
            <param name="availableUmDefinitions">Elenco delle definizioni su cui eseguire la ricerca</param>
            <param name="resultUm">UM trovato</param>
            <param name="resultPrefix">PrefixItem trovato</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParseUm(System.Collections.Generic.IEnumerable{Xilium.Lib.Math.Um.UmPrefixSystem},Xilium.Lib.Math.Um.UmDefinition@,Xilium.Lib.Math.Um.UmPrefixItem@)">
            <summary>
            Cerca la coppia UM e Prefix più appropriata; restituisce True se viene trovata.
            </summary>
            <param name="availableUmPrefixSystems">Elenco dei prefissi su cui eseguire la ricerca (NULL per usare i predissi dell'UM in analisi)</param>
            <param name="resultUm">UM trovato</param>
            <param name="resultPrefix">PrefixItem trovato</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParseUm(System.Collections.Generic.IEnumerable{Xilium.Lib.Math.Um.UmDefinition},System.Collections.Generic.IEnumerable{Xilium.Lib.Math.Um.UmPrefixSystem},Xilium.Lib.Math.Um.UmDefinition@,Xilium.Lib.Math.Um.UmPrefixItem@)">
            <summary>
            Cerca la coppia UM e Prefix più appropriata; restituisce True se viene trovata.
            </summary>
            <param name="availableUmDefinitions">Elenco delle definizioni su cui eseguire la ricerca</param>
            <param name="availableUmPrefixSystems">Elenco dei prefissi su cui eseguire la ricerca (NULL per usare i predissi dell'UM in analisi)</param>
            <param name="resultUm">UM trovato</param>
            <param name="resultPrefix">PrefixItem trovato</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParseNumber(Xilium.Lib.Math.Um.UmNumber{`0}@)">
            <summary>
            Cerca di convertire l'oggetto in UmNumber; restituisce True se ci riesce.
            </summary>
            <param name="result">oggetto UmNumber generato</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParseNumber(System.Collections.Generic.IEnumerable{Xilium.Lib.Math.Um.UmDefinition},Xilium.Lib.Math.Um.UmNumber{`0}@)">
            <summary>
            Cerca di convertire l'oggetto in UmNumber; restituisce True se ci riesce.
            </summary>
            <param name="availableUmDefinitions">Elenco delle definizioni su cui eseguire la ricerca</param>
            <param name="result">oggetto UmNumber generato</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParseNumber(System.Collections.Generic.IEnumerable{Xilium.Lib.Math.Um.UmPrefixSystem},Xilium.Lib.Math.Um.UmNumber{`0}@)">
            <summary>
            Cerca di convertire l'oggetto in UmNumber; restituisce True se ci riesce.
            </summary>
            <param name="availableUmPrefixSystems">Elenco dei prefissi su cui eseguire la ricerca (NULL per usare i predissi dell'UM in analisi)</param>
            <param name="result">oggetto UmNumber generato</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParseNumber(System.Collections.Generic.IEnumerable{Xilium.Lib.Math.Um.UmDefinition},System.Collections.Generic.IEnumerable{Xilium.Lib.Math.Um.UmPrefixSystem},Xilium.Lib.Math.Um.UmNumber{`0}@)">
            <summary>
            Cerca di convertire l'oggetto in UmNumber; restituisce True se ci riesce.
            </summary>
            <param name="availableUmDefinitions">Elenco delle definizioni su cui eseguire la ricerca</param>
            <param name="availableUmPrefixSystems">Elenco dei prefissi su cui eseguire la ricerca (NULL per usare i predissi dell'UM in analisi)</param>
            <param name="result">oggetto UmNumber generato</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParseNumber``1(Xilium.Lib.Math.Um.UmNumber{`0}@)">
            <summary>
            Cerca di convertire l'oggetto in UmNumber; restituisce True se ci riesce.
            </summary>
            <param name="result">oggetto UmNumber generato</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParseNumber``1(System.Collections.Generic.IEnumerable{Xilium.Lib.Math.Um.UmDefinition},Xilium.Lib.Math.Um.UmNumber{`0}@)">
            <summary>
            Cerca di convertire l'oggetto in UmNumber; restituisce True se ci riesce.
            </summary>
            <param name="availableUmDefinitions">Elenco delle definizioni su cui eseguire la ricerca</param>
            <param name="result">oggetto UmNumber generato</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParseNumber``1(System.Collections.Generic.IEnumerable{Xilium.Lib.Math.Um.UmPrefixSystem},Xilium.Lib.Math.Um.UmNumber{`0}@)">
            <summary>
            Cerca di convertire l'oggetto in UmNumber; restituisce True se ci riesce.
            </summary>
            <param name="availableUmPrefixSystems">Elenco dei prefissi su cui eseguire la ricerca (NULL per usare i predissi dell'UM in analisi)</param>
            <param name="result">oggetto UmNumber generato</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmFlexNumber`1.TryParseNumber``1(System.Collections.Generic.IEnumerable{Xilium.Lib.Math.Um.UmDefinition},System.Collections.Generic.IEnumerable{Xilium.Lib.Math.Um.UmPrefixSystem},Xilium.Lib.Math.Um.UmNumber{`0}@)">
            <summary>
            Cerca di convertire l'oggetto in UmNumber; restituisce True se ci riesce.
            </summary>
            <param name="availableUmDefinitions">Elenco delle definizioni su cui eseguire la ricerca</param>
            <param name="availableUmPrefixSystems">Elenco dei prefissi su cui eseguire la ricerca (NULL per usare i predissi dell'UM in analisi)</param>
            <param name="result">oggetto UmNumber generato</param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Math.Um.UmNumberFormat">
            <summary>
            Oggetto di definizione del formato di conversione 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumberFormat.#ctor(Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Crea una nuova istanza copiando i valori dal formato indicato
            </summary>
            <param name="sourceFormatProvider"></param>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumberFormat.internalFormatObject(System.String,System.Object[],System.Func{System.Object,System.String,System.String})">
            <summary>
            Esegue la conversione del formato in valore esteso, sostituendo i segnaposto, come fa `string.Format`.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <param name="converterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumberFormat.internalToString(System.Object,System.String)">
            <summary>
            Esegue la conversione dell'oggetto in stringa, seguendo le direttive del formato indicato.
            </summary>
            <param name="obj"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumberFormat.internalObjectToString(System.Object,System.String)">
            <summary>
            Esegue la conversione di un oggetto non appartenente al namespace `Xilium.lib.Math.Um` in stringa, seguendo le direttive del formato indicato.
            </summary>
            <param name="obj"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumberFormat.JoinFormats(System.String[])">
            <summary>
            Combina più formati in uno solo.
            </summary>
            <param name="formats">Elenco di formati da combinare</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumberFormat.JoinFormats(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combina più formati in uno solo.
            </summary>
            <param name="formats">Elenco di formati da combinare</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumberFormat.internalJoinFormats(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combina più formati in uno solo.
            </summary>
            <param name="formats">Elenco di formati da combinare</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumberFormat.SplitFormats(System.String)">
            <summary>
            Separa una stringa combinedFormats nei sottoformati.
            </summary>
            <param name="combinedFormats"></param>
            <returns></returns>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmPrefixItem.Name">
            <summary>
            Nome ufficiale
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmPrefixItem.Alias">
            <summary>
            Nome abbreviato utilizzabile in alternativa a Symbol
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmPrefixItem.Symbol">
            <summary>
            Simbolo
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmPrefixItem.ScaleBase">
            <summary>
            Base della scala
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmPrefixItem.ScaleExp">
            <summary>
            Esponente della scala
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmPrefixItem.Scale">
            <summary>
            Scala di conversione del valore con prefisso in valore senza prefisso
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmPrefixItem.IsUnitItem">
            <summary>
            Indica se il prefisso identifica l'unità.
            </summary>
        </member>
        <member name="T:Xilium.Lib.Math.Um.UmPrefixSystem">
            <summary>
            Sistema di prefisso dell'unità di misura
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmPrefixSystem.#ctor(System.String)">
            <summary>
            Istanzia un nuovo oggetto del sistema di prefisso
            </summary>
            <param name="code"></param>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmPrefixSystem.Code">
            <summary>
            Codice identificativo del sistema di prefisso di unità di misura
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmPrefixSystem.Items">
            <summary>
            Elenco di tutti i prefissi
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmPrefixSystem.GetItem(System.String)">
            <summary>
            Restituisce l'item corrispondente all'alias o simbolo indicato. 
            </summary>
            <param name="symbol">Alias o simbolo</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmPrefixSystem.CreatePrefixItem(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Crea, accoda e restituisce un nuovo item di prefisso del sistema corrente.
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
            <param name="symbol"></param>
            <param name="scaleBase"></param>
            <param name="scaleExp"></param>
            <returns></returns>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmPrefixSystem.UnitItem">
            <summary>
            Restituisce il prefisso di unità, ossia l'item che ha la property `Scale` valorizzata a 1
            </summary>
        </member>
        <member name="T:Xilium.Lib.Math.Um.UmSize">
            <summary>
            Definizione di una grandezza fisica misurabile con una o più unità di misura.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmSize.#ctor(System.String)">
            <summary>
            Istanzia la classe utilizzando il codice identificativo indicato.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmSize.SetReady">
            <summary>
            Dichiara l'istanza come pronta per operare
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmSize.instanceCreatingHandler">
            <summary>
            Metodo invocato su inizio creazione della nuova istanza.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmSize.instanceCreatedHandler">
            <summary>
            Metodo invocato su conclusione preparazione della nuova istanza
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmSize.internalStandardInstanceCreator``1">
            <summary>
            Crea l'istanza dell'oggetto e carica le definizioni UM conosciute.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmSize.internalLoadUmDefinitionList(Xilium.Lib.Math.Um.UmSize)">
            <summary>
            Restituisce la lista degli oggetti UmDefinition per l'oggetto umSize indicato
            </summary>
            <param name="umSize"></param>
            <returns></returns>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmSize.Code">
            <summary>
            Codice identificativo della grandezza fisica
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmSize.IsReady">
            <summary>
            Indica se l'istanza è pronta per operare
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmSize.UmDefinitions">
            <summary>
            Elenco delle unità di misura per la misurazione della grandezza fisica.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmSize.AddUmDefinition(Xilium.Lib.Math.Um.UmDefinition)">
            <summary>
            Aggiunge un oggetto UmDefinition alla collection del UmSize.
            </summary>
            <param name="umDefinition"></param>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmSize.MainUmDefinition">
            <summary>
            Indica l'unità di misura principale.
            <para>Verrà usata come riferimento per determinare la conversione fra valori.</para>
            </summary>
        </member>
        <member name="T:Xilium.Lib.Math.Um.UmNumber`1">
            <summary>
            Rappresenta un numero in una unità di misura prestabilita. Una volta istanziata la classe, il numero non può essere modificato.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.#ctor(Xilium.Lib.Math.Um.UmDefinition,`0)">
            <summary>
            Istanzia un nuovo numero, senza prefisso.
            </summary>
            <param name="um"></param>
            <param name="value"></param>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.#ctor(Xilium.Lib.Math.Um.UmDefinition,`0,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Istanzia un nuovo numero, impostando un prefisso.
            </summary>
            <param name="um"></param>
            <param name="value"></param>
            <param name="prefix"></param>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmNumber`1.Um">
            <summary>
            Unità di misura del valore
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmNumber`1.Value">
            <summary>
            Valore nell'unità di misura e nel prefisso indicato.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmNumber`1.AbsoluteValue">
            <summary>
            Valore assoluto del numero.
            <para>Restituisce `Value` espresso in unità.</para>
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmNumber`1.Prefix">
            <summary>
            Indica il prefisso dell'unità di misura (es. "m" per "milli", "k" per "kilo", "M" per "mega").
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToPrefix(Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore in un nuovo prefisso
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToPrefix``1(Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore in un nuovo prefisso
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToUnitPrefix">
            <summary>
            Converte il valore nel prefisso unità
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToUnitPrefix``1">
            <summary>
            Converte il valore nel prefisso unità
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ValueToPrefix(Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore numerico in un nuovo prefisso
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ValueToPrefix``1(Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore numerico in un nuovo prefisso
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ValueToUnitPrefix">
            <summary>
            Converte il valore numerico nel prefisso unità
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ValueToUnitPrefix``1">
            <summary>
            Converte il valore numerico nel prefisso unità
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.getPrefixConverterRatio(Xilium.Lib.Math.Um.UmPrefixItem,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Calcola il fattore di conversione fra due prefissi
            </summary>
            <param name="prefixFrom">prefisso attuale</param>
            <param name="prefixTo">prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.BestPrefix">
            <summary>
            Restituisce il prefisso più opportuno per rappresentare il valore numerico; utilizza il valore di soglia `1.222`.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.BestPrefix(`0)">
            <summary>
            Restituisce il prefisso più opportuno per rappresentare il valore numerico.
            </summary>
            <param name="triggerValue">
            	Valore di soglia per il cambio di prefisso:
            	il valore del numero sovrà essere superiore o uguale alla soglia nel prefisso restituito, e inferiore nel prefisso successivo.
            	<example>Esempio: con `triggerValue = 1.222`, il valore `1200300 Byte` sarà convertito in `1200.3 KByte`, mentre `1234567 Byte` sarà convertito in `1.234567 MByte`</example>
            </param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.BestPrefix(Xilium.Lib.Math.Um.UmPrefixItem,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Restituisce il prefisso più opportuno per rappresentare il valore numerico.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.BestPrefix(`0,Xilium.Lib.Math.Um.UmPrefixItem,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Restituisce il prefisso più opportuno per rappresentare il valore numerico.
            </summary>
            <param name="triggerValue">
            	Valore di soglia per il cambio di prefisso:
            	il valore del numero dovrà essere superiore o uguale alla soglia nel prefisso restituito, e inferiore nel prefisso successivo.
            	<example>Esempio: con `triggerValue = 1.222`, il valore `1200300 Byte` sarà convertito in `1200.3 KByte`, mentre `1234567 Byte` sarà convertito in `1.234567 MByte`</example>
            	Il valore di soglia dovrà essere maggiore di 0.
            </param>
            <param name="minPrefix">Limite inferiore di restituzione Prefix (prefisso con Scale minore)</param>
            <param name="maxPrefix">Limite superiore di restituzione Prefix (prefisso con Scale maggiore)</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToUm(Xilium.Lib.Math.Um.UmDefinition)">
            <summary>
            Converte il valore in una nuova UM
            </summary>
            <param name="um">La nuova unità di misura</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToUm``1(Xilium.Lib.Math.Um.UmDefinition)">
            <summary>
            Converte il valore in una nuova UM
            </summary>
            <param name="um">La nuova valuta</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToUm(Xilium.Lib.Math.Um.UmDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore in una nuova UM
            </summary>
            <param name="um">La nuova unità di misura</param>
            <param name="prefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToUm``1(Xilium.Lib.Math.Um.UmDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore in una nuova UM
            </summary>
            <param name="um">La nuova valuta</param>
            <param name="prefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ValueToUm(Xilium.Lib.Math.Um.UmDefinition)">
            <summary>
            Converte il valore nella nuova UM
            </summary>
            <param name="um">La nuova unità di misura</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ValueToUm(Xilium.Lib.Math.Um.UmDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore nella nuova UM
            </summary>
            <param name="um">La nuova unità di misura</param>
            <param name="prefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ValueToUm``1(Xilium.Lib.Math.Um.UmDefinition)">
            <summary>
            Converte il valore nella nuova UM
            </summary>
            <param name="um">La nuova unità di misura</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ValueToUm``1(Xilium.Lib.Math.Um.UmDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore nella nuova UM
            </summary>
            <param name="um">La nuova unità di misura</param>
            <param name="prefix">Prefisso di destinazione</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.internalValueToUm``2(``0,Xilium.Lib.Math.Um.UmDefinition,Xilium.Lib.Math.Um.UmPrefixItem,Xilium.Lib.Math.Um.UmDefinition,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Converte il valore da una unità di misura / prefisso in una nuova unità di misura / prefisso.
            </summary>
            <param name="sourceValue"></param>
            <param name="sourceUm"></param>
            <param name="sourcePrefix"></param>
            <param name="destUm"></param>
            <param name="destPrefix"></param>
            <typeparam name="SrcT"></typeparam>
            <typeparam name="DestT"></typeparam>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToString">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToString(System.String)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="format">Formato di conversione del numero in stringa (vedere IUmNumberFormatProvider.StringFormat).</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToString(Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToString(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="format">Formato di conversione del numero in stringa (vedere IUmNumberFormatProvider.StringFormat).</param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.internalToString(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.internalStringConverter(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider,System.Func{System.String,System.String})">
            <summary>
            Converte il valore in forma testuale
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <param name="converterDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToBestString">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToBestString(`0)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="triggerValue">Valore di soglia per il cambio di prefisso (vedere metodo BestPrefix)</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToBestString(System.String)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="format">
            	Formato del Prefix combinato con UM; usare il segnaposto "p" per il prefisso, e "u" per l'unità di misura (vedere metodo `ToString`).
            </param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToBestString(`0,System.String)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="triggerValue">Valore di soglia per il cambio di prefisso (vedere metodo BestPrefix)</param>
            <param name="format">
            	Formato del Prefix combinato con UM; usare il segnaposto "p" per il prefisso, e "u" per l'unità di misura (vedere metodo `ToString`).
            </param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToBestString(Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToBestString(`0,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="triggerValue">Valore di soglia per il cambio di prefisso (vedere metodo BestPrefix)</param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToBestString(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="format">
            	Formato del Prefix combinato con UM; usare il segnaposto "p" per il prefisso, e "u" per l'unità di misura (vedere metodo `ToString`).
            </param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.ToBestString(`0,System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="triggerValue">Valore di soglia per il cambio di prefisso (vedere metodo BestPrefix)</param>
            <param name="format">
            	Formato del Prefix combinato con UM; usare il segnaposto "p" per il prefisso, e "u" per l'unità di misura (vedere metodo `ToString`).
            </param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.internalToBestString(`0,System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Converte il valore in forma testuale eseguendo l'equivalenza al prefisso migliore.
            </summary>
            <param name="triggerValue">Valore di soglia per il cambio di prefisso (vedere metodo BestPrefix)</param>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.UmToString">
            <summary>
            Restituisce l'unità di misura (comprensiva di prefisso) sottoforma di stringa
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.UmToString(System.String)">
            <summary>
            Restituisce l'unità di misura (comprensiva di prefisso) sottoforma di stringa
            </summary>
            <param name="format">Formato di conversione dell'unità di misura in stringa (vedere IUmNumberFormatProvider.UmStringFormat).</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.UmToString(Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Restituisce l'unità di misura (comprensiva di prefisso) sottoforma di stringa
            </summary>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.UmToString(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Restituisce l'unità di misura (comprensiva di prefisso) sottoforma di stringa
            </summary>
            <param name="format">Formato di conversione dell'unità di misura in stringa (vedere IUmNumberFormatProvider.UmStringFormat).</param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.internalUmToString(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Restituisce l'unità di misura (comprensiva di prefisso) sottoforma di stringa
            </summary>
            <param name="format">Formato di conversione dell'unità di misura in stringa (vedere IUmNumberFormatProvider.UmStringFormat).</param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.internalUmConverter(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider,System.Func{System.String,System.String})">
            <summary>
            Restituisce l'unità di misura (comprensiva di prefisso) sottoforma di stringa
            </summary>
            <param name="format">Formato di conversione dell'unità di misura in stringa (vedere IUmNumberFormatProvider.UmStringFormat).</param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmNumber`1.internalPrefixToString(System.String,Xilium.Lib.Math.Um.Contracts.IUmNumberFormatProvider)">
            <summary>
            Restituisce il prefisso dell'unità di misura sottoforma di stringa
            </summary>
            <param name="format">Formato di conversione dell'unità di misura in stringa (vedere IUmNumberFormatProvider.UmStringFormat).</param>
            <param name="formatProvider">Provider di formattazione</param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Math.Um.UmDefinition">
            <summary>
            Definizione di una unità di misura
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmDefinition.#ctor(Xilium.Lib.Math.Um.UmSize,System.String,System.String,System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="umSize"></param>
            <param name="name"></param>
            <param name="alias"></param>
            <param name="symbol"></param>
            <param name="mainUmRatio">
            Fattore di conversione dell'UM corrente nell'UM principale.
            <para>Il valore indica quante unità dell'UM principale occorrono per formare "una unità" nella UM corrente.</para>
            </param>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmDefinition.#ctor(Xilium.Lib.Math.Um.UmSize,System.String,System.String,System.String,System.Double,Xilium.Lib.Math.Um.UmNumberFormat)">
            <summary>
            
            </summary>
            <param name="umSize"></param>
            <param name="name"></param>
            <param name="alias"></param>
            <param name="symbol"></param>
            <param name="mainUmRatio">
            Fattore di conversione dell'UM corrente nell'UM principale.
            <para>Il valore indica quante unità dell'UM principale occorrono per formare "una unità" nella UM corrente.</para>
            </param>
            <param name="defaultUmNumberFormat"></param>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmDefinition.UmSize">
            <summary>
            Grandezza fisica a cui si applica l'unità di misura
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmDefinition.Name">
            <summary>
            Codice identificativo dell'unità di misura
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmDefinition.Alias">
            <summary>
            Nome abbreviato utilizzabile in alternativa a Symbol (spesso è identico a Symbol)
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmDefinition.Symbol">
            <summary>
            Simbolo di rappresentazione dell'unità di misura
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmDefinition.MainUmRatio">
            <summary>
            Fattore di conversione dell'UM corrente nell'UM principale.
            <para>Il valore indica quante unità dell'UM principale occorrono per formare "una unità" nella UM corrente.</para>
            <example>Per la UM "Pollici" la property sarà 0.0254 (1 pollice = 0.0254 metri o 2.54 cm)</example>
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmDefinition.UmPrefixSystems">
            <summary>
            Elenco dei prefissi supportati dall'unità di misura
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmDefinition.MainUmPrefixSystem">
            <summary>
            Restituisce il PrefixSystem di default
            </summary>
        </member>
        <member name="P:Xilium.Lib.Math.Um.UmDefinition.DefaultUmNumberFormat">
            <summary>
            Formato di default di conversione del numero in stringa.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmDefinition.CreateNumber``1(``0)">
            <summary>
            Crea un numero avente come unità di misura l'oggetto corrente.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Math.Um.UmDefinition.CreateNumber``1(``0,Xilium.Lib.Math.Um.UmPrefixItem)">
            <summary>
            Crea un numero avente come unità di misura l'oggetto corrente.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Reflection.ClassSearcher">
            <summary>
            Offre metodi per la ricerca di classi in tutti gli Assembly disponibili
            </summary>
        </member>
        <member name="M:Xilium.Lib.Reflection.ClassSearcher.AllAssemblies">
            <summary>
            Restituisce la lista completa degli Assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Reflection.ClassSearcher.XiliumAssemblies">
            <summary>
            Restituisce la lista di tutti gli Assembly "Xilium"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Reflection.ClassSearcher.AppCodeAssemblies">
            <summary>
            Restituisce la lista di tutti gli Assembly della cartella Web "App_Code"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Reflection.ClassSearcher.IsXiliumAssembly(System.Reflection.Assembly)">
            <summary>
            Indica se l'Assembly è di "Xilium"
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Reflection.ClassSearcher.IsAppCodeAssembly(System.Reflection.Assembly)">
            <summary>
            Indica se l'Assembly è della cartella Web "App_Code"
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Reflection.ClassSearcher.IsMicrosoftAssembly(System.Reflection.Assembly)">
            <summary>
            Indica se l'Assembly è del Namespace "Microsoft
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Reflection.ClassSearcher.IsSystemAssembly(System.Reflection.Assembly)">
            <summary>
            Indica se l'Assembly è del Namespace "System
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Security.CryptoNET">
            <summary>
            Cripta e decripta messaggi, usando AES Rijndael.
            I metodi OpenSSLEncrypt/Decrypt sono compatibili con gli omonimi metodi della classe [Xilium.lib.CryptoJS].
            Classe inizialmente presa da: http://stackoverflow.com/questions/5452422/openssl-using-only-net-classes
            </summary>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.OpenSSLEncrypt(System.String,System.String)">
            <summary>
            Cripta i dati passati con la password indicata
            </summary>
            <param name="plainText"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.OpenSSLEncryptToBase64(System.String,System.String)">
            <summary>
            Cripta i dati passati con la password indicata. Restituisce una stringa nel formato Base64.
            </summary>
            <param name="plainText"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.OpenSSLEncryptToUrl64(System.String,System.String)">
            <summary>
            Cripta i dati passati con la password indicata. Restituisce una stringa nel formato Url64.
            </summary>
            <param name="plainText"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.OpenSSLDecrypt(System.Byte[],System.String)">
            <summary>
            Decripta il codice utilizzando la password indicata.
            </summary>
            <param name="encrypted"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.OpenSSLDecryptFromBase64(System.String,System.String)">
            <summary>
            Decripta il codice utilizzando la password indicata. Accetta una stringa codificata nel formato Base64.
            </summary>
            <param name="base64encrypted"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.OpenSSLDecryptFromUrl64(System.String,System.String)">
            <summary>
            Decripta il codice utilizzando la password indicata. Accetta una stringa codificata nel formato Url64.
            </summary>
            <param name="url64encrypted"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.SHA256(System.String)">
            <summary>
            Genera il codice Hash del valore indicato, utilizzando l'algoritmo SHA256.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.SHA256ToHex(System.String)">
            <summary>
            Genera il codice Hash del valore indicato, utilizzando l'algoritmo SHA256, e restituisce il codice in formato esadecimale.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.SHA256ToBase64(System.String)">
            <summary>
            Genera il codice Hash del valore indicato, utilizzando l'algoritmo SHA256, e restituisce il codice in formato Base64.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.SHA256ToUrl64(System.String)">
            <summary>
            Genera il codice Hash del valore indicato, utilizzando l'algoritmo SHA256, e restituisce il codice in formato Url64.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.MD5(System.String)">
            <summary>
            Genera un codice Hash del valore indicato, utilizzando l'algoritmo MD5.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.MD5ToHex(System.String)">
            <summary>
            Genera un codice Hash del valore indicato, utilizzando l'algoritmo MD5, e restituisce un codice in formato esadecimale.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.MD5ToBase64(System.String)">
            <summary>
            Genera un codice Hash del valore indicato, utilizzando l'algoritmo MD5, e restituisce un codice in formato Base64
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.MD5ToUrl64(System.String)">
            <summary>
            Genera un codice Hash del valore indicato, utilizzando l'algoritmo MD5, e restituisce un codice in formato Url64
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.internalBytesToHex(System.Byte[])">
            <summary>
            Converte un valore in byte in una stringa di valori esadecimali
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.internalBytesToBase64(System.Byte[])">
            <summary>
            Converte un valore in byte in una stringa Base64
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.CryptoNET.internalBase64ToUrl64(System.String)">
            <summary>
            Converte un valore in byte in una stringa Url64
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Security.RijndaelEnhanced">
            <summary>
            This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and
            decrypt data. As long as it is initialized with the same constructor
            parameters, the class will use the same key. Before performing encryption,
            the class can prepend random bytes to plain text and generate different
            encrypted values from the same plain text, encryption key, initialization
            vector, and other parameters. This class is thread-safe.
            </summary>
            <remarks>
            Be careful when performing encryption and decryption. There is a bug
            ("feature"?) in .NET Framework, which causes corruption of encryptor/
            decryptor if a cryptographic exception occurs during encryption/
            decryption operation. To correct the problem, re-initialize the class
            instance when a cryptographic exception occurs.
            </remarks>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.#ctor(System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, no initialization vector, electronic codebook
            (ECB) mode, SHA-1 hashing algorithm, and 4-to-8 byte long salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <remarks>
            This constructor is not recommended because it does not use
            initialization vector and uses the ECB cipher mode, which is less
            secure than the CBC mode.
            </remarks>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.#ctor(System.String,System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, SHA-1
            hashing algorithm, and 4-to-8 byte long salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, SHA-1 
            hashing algorithm, and 0-to-8 byte long salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, SHA-1
            hashing algorithm. Use the minSaltLen and maxSaltLen parameters to
            specify the size of randomly generated salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption using the key derived from 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, and
            SHA-1 hashing algorithm.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be 
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption using the key derived from 1 password iteration, hashing 
            without salt, and cipher block chaining (CBC) mode.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
            <param name="hashAlgorithm">
            Hashing algorithm: "MD5" or "SHA1". SHA1 is recommended.
            </param>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption using the key derived from 1 password iteration, and
            cipher block chaining (CBC) mode.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
            <param name="hashAlgorithm">
            Hashing algorithm: "MD5" or "SHA1". SHA1 is recommended.
            </param>
            <param name="saltValue">
            Salt value used for password hashing during key generation. This is
            not the same as the salt we will use during encryption. This parameter
            can be any string.
            </param>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with the key derived from the explicitly specified
            parameters.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
            <param name="hashAlgorithm">
            Hashing algorithm: "MD5" or "SHA1". SHA1 is recommended.
            </param>
            <param name="saltValue">
            Salt value used for password hashing during key generation. This is
            not the same as the salt we will use during encryption. This parameter
            can be any string.
            </param>
            <param name="passwordIterations">
            Number of iterations used to hash password. More iterations are
            considered more secure but may take longer.
            </param>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.Encrypt(System.String)">
            <summary>
            Encrypts a string value generating a base64-encoded string.
            </summary>
            <param name="plainText">
            Plain text string to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.Encrypt(System.Byte[])">
            <summary>
            Encrypts a byte array generating a base64-encoded string.
            </summary>
            <param name="plainTextBytes">
            Plain text bytes to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.EncryptToBytes(System.String)">
            <summary>
            Encrypts a string value generating a byte array of cipher text.
            </summary>
            <param name="plainText">
            Plain text string to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a byte array.
            </returns>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.EncryptToBytes(System.Byte[])">
            <summary>
            Encrypts a byte array generating a byte array of cipher text.
            </summary>
            <param name="plainTextBytes">
            Plain text bytes to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a byte array.
            </returns>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.Decrypt(System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value generating a string result.
            </summary>
            <param name="cipherText">
            Base64-encoded cipher text string to be decrypted.
            </param>
            <returns>
            Decrypted string value.
            </returns>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.Decrypt(System.Byte[])">
            <summary>
            Decrypts a byte array containing cipher text value and generates a
            string result.
            </summary>
            <param name="cipherTextBytes">
            Byte array containing encrypted data.
            </param>
            <returns>
            Decrypted string value.
            </returns>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.DecryptToBytes(System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value and generates a byte array
            of plain text data.
            </summary>
            <param name="cipherText">
            Base64-encoded cipher text string to be decrypted.
            </param>
            <returns>
            Byte array containing decrypted value.
            </returns>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.DecryptToBytes(System.Byte[])">
            <summary>
            Decrypts a base64-encoded cipher text value and generates a byte array
            of plain text data.
            </summary>
            <param name="cipherTextBytes">
            Byte array containing encrypted data.
            </param>
            <returns>
            Byte array containing decrypted value.
            </returns>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.AddSalt(System.Byte[])">
            <summary>
            Adds an array of randomly generated bytes at the beginning of the
            array holding original plain text value.
            </summary>
            <param name="plainTextBytes">
            Byte array containing original plain text value.
            </param>
            <returns>
            Either original array of plain text bytes (if salt is not used) or a
            modified array containing a randomly generated salt added at the 
            beginning of the plain text bytes. 
            </returns>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.GenerateSalt">
            <summary>
            Generates an array holding cryptographically strong bytes.
            </summary>
            <returns>
            Array of randomly generated bytes.
            </returns>
            <remarks>
            Salt size will be defined at random or exactly as specified by the
            minSlatLen and maxSaltLen parameters passed to the object constructor.
            The first four bytes of the salt array will contain the salt length
            split into four two-bit pieces.
            </remarks>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhanced.GenerateRandomNumber(System.Int32,System.Int32)">
            <summary>
            Generates random integer.
            </summary>
            <param name="minValue">
            Min value (inclusive).
            </param>
            <param name="maxValue">
            Max value (inclusive).
            </param>
            <returns>
            Random integer value between the min and max values (inclusive).
            </returns>
            <remarks>
            This methods overcomes the limitations of .NET Framework's Random
            class, which - when initialized multiple times within a very short
            period of time - can generate the same "random" number.
            </remarks>
        </member>
        <member name="T:Xilium.Lib.Security.RijndaelEnhancedTest">
            <summary>
            Illustrates the use of RijndaelEnhanced class to encrypt and decrypt data
            using a random salt value.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Security.RijndaelEnhancedTest.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Security.Token.CreateAuthorizationToken(System.String,System.Int32)">
            <summary>
            Crea un Token di autorizzazione, usando l'orario UTC.
            </summary>
            <param name="password">Password segreta</param>
            <param name="expireAfterMinutes">Minuti dopo i quali deve scadere il Token</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.Token.CreateAuthorizationToken(System.DateTimeOffset,System.String,System.Int32)">
            <summary>
            Crea un Token di autorizzazione, usando l'orario di riferimento indicato.
            </summary>
            <param name="datetimeNow">Orario di riferimento</param>
            <param name="password">Password segreta</param>
            <param name="expireAfterMinutes">Minuti dopo i quali deve scadere il Token</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.Token.CheckAuthorizationToken(System.String,System.Int32,System.String)">
            <summary>
            Verifica la validità del Token, usando l'orario UTC.
            </summary>
            <param name="password">Password segreta</param>
            <param name="expireAfterMinutes">Minuti dopo i quali deve scadere il Token (deve coincidere col relativo argomento per la creazione Token)</param>
            <param name="token">Token da verificare</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Security.Token.CheckAuthorizationToken(System.DateTimeOffset,System.String,System.Int32,System.String)">
            <summary>
            Verifica la validità del Token, usando l'orario di riferimento indicato.
            </summary>
            <param name="datetimeNow">Orario di riferimento</param>
            <param name="password">Password segreta</param>
            <param name="expireAfterMinutes">Minuti dopo i quali deve scadere il Token (deve coincidere col relativo argomento per la creazione Token)</param>
            <param name="token">Token da verificare</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.Library.RemoveHtml(System.Web.IHtmlString)">
            <summary>
            Restituisce il plain text contenuto nei tag HTML passati.
            I tag "br" e "p" vengono convertiti con a-capo.
            </summary>
            <param name="value">Codice HTML</param>
            <returns>Testo in chiaro</returns>
        </member>
        <member name="M:Xilium.Lib.Text.Library.RemoveHtml(System.String)">
            <summary>
            Restituisce il plain text contenuto nei tag HTML passati.
            I tag "br" e "p" vengono convertiti con a-capo.
            </summary>
            <param name="value">Codice HTML</param>
            <returns>Testo in chiaro</returns>
        </member>
        <member name="M:Xilium.Lib.Text.Library.LevensteinDistance(System.String,System.String)">
            <summary>
            Compute Levenshtein distance
            </summary>
            <param name="s">String 1</param>
            <param name="t">String 2</param>
            <returns>Distance between the two strings.
            The larger the number, the bigger the difference.
            </returns>
        </member>
        <member name="M:Xilium.Lib.Text.Library.TruncatePhrase(System.String,System.Int32,System.Single,System.String)">
            <summary>
            Estrae una parte del testo, cercando di mantenere una corretta formattazione della frase:
            <para>- se il testo è corto, lo restituisce per intero;</para>
            <para>- se nei pressi del carattere [length] vi termina una frase, restituisce il testo fino alla fine di questa;</para>
            <para>- se nei pressi del carattere [length] vi termina una parola, restituisce il testo fino alla fine di questa;</para>
            <para>- in alternativa, taglia il testo a [length] e vi accoda i punti di sospensione.</para>
            <para>In ogni caso restituisce una stringa trimmata dei seguenti caratteri: '\r', '\n', ' '.</para>
            </summary>
            <param name="value">Il testo da elaborare</param>
            <param name="length">Lunghezza della stringa da restituire</param>
            <param name="tolerance">Tolleranza rispetto alla lunghezza della stringa, in percentuale; necessario per determinare la fine della frase o parola (es: 0.25 = 25%)</param>
            <param name="ellipsis">Caratteri da aggiungere qualora si dovesse rendere necessario eseguire un taglio netto del testo</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.Library.TruncatePhrase(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Estrae una parte del testo, cercando di mantenere una corretta formattazione della frase:
            <para>- se il testo è corto, lo restituisce per intero;</para>
            <para>- se nei pressi del carattere [length] vi termina una frase, restituisce il testo fino alla fine di questa;</para>
            <para>- se nei pressi del carattere [length] vi termina una parola, restituisce il testo fino alla fine di questa;</para>
            <para>- in alternativa, taglia il testo a [length] e vi accoda i punti di sospensione.</para>
            <para>In ogni caso restituisce una stringa trimmata dei seguenti caratteri: '\r', '\n', ' '.</para>
            </summary>
            <param name="value">Il testo da elaborare</param>
            <param name="length">Lunghezza della stringa da restituire</param>
            <param name="tolerance">Tolleranza rispetto alla lunghezza della stringa, in numero caratteri; necessario per determinare la fine della frase o parola</param>
            <param name="ellipsis">Caratteri da aggiungere qualora si dovesse rendere necessario eseguire un taglio netto del testo</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.Library.truncatePhrasePatternCheck(System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Cerca il match del pattern più vicino possibile alla posizione `startAt`
            </summary>
            <param name="value"></param>
            <param name="startAt"></param>
            <param name="tolerance"></param>
            <param name="pattern"></param>
            <param name="checkLength"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Text.QuotedPrintable">
            <summary>Provides methods to encode and decode data using the QuotedPrintable algorithm.</summary>
        </member>
        <member name="T:Xilium.Lib.Text.QuotedPrintable.BufferSize">
            <summary>Buffer size used for reading and writing data to files.</summary>
        </member>
        <member name="F:Xilium.Lib.Text.QuotedPrintable.BufferSize.Small">
            <summary>Small buffer size (1 KB).</summary>
        </member>
        <member name="F:Xilium.Lib.Text.QuotedPrintable.BufferSize.Large">
            <summary>Large buffer size (1 MB).</summary>
        </member>
        <member name="T:Xilium.Lib.Text.QuotedPrintable.EventOperation">
            <summary>The operation being performed.</summary>
        </member>
        <member name="F:Xilium.Lib.Text.QuotedPrintable.EventOperation.Encode">
            <summary>Encoding is taking place.</summary>
        </member>
        <member name="F:Xilium.Lib.Text.QuotedPrintable.EventOperation.Decode">
            <summary>Decoding is taking place.</summary>
        </member>
        <member name="F:Xilium.Lib.Text.QuotedPrintable.EventOperation.CRC32">
            <summary>CRC32 calculation is taking place.</summary>
        </member>
        <member name="P:Xilium.Lib.Text.QuotedPrintable.FileBufferSize">
            <summary>Buffer size used for reading and writing data to files.</summary>
            <value>The selected buffer size. Default is 1MB</value>
        </member>
        <member name="E:Xilium.Lib.Text.QuotedPrintable.Progress">
            <summary>Raised when a chunk is encoded or decoded.</summary>
            <param name="Value">An integer set to the current value.</param>
            <param name="Total">An integer set to the maximum value.</param>
            <param name="Operation">The operation being performed (Encoding, decoding or CRC32 check).</param>
        </member>
        <member name="M:Xilium.Lib.Text.QuotedPrintable.Encode(System.IO.Stream)">
            <summary>Encodes a stream with the QuotedPrintable algorithm.</summary>
            <param name="streamToEncode">A stream of the text to encode.</param>
            <returns>A string containing the encoded text.</returns>
        </member>
        <member name="M:Xilium.Lib.Text.QuotedPrintable.Encode(System.Char[])">
            <summary>Encodes a char array with the QuotedPrintable algorithm.</summary>
            <param name="CharsToEncode">A char array containing the text to encode.</param>
            <returns>A string containing the encoded text.</returns>
        </member>
        <member name="M:Xilium.Lib.Text.QuotedPrintable.Encode(System.String)">
            <summary>Encodes a file with the QuotedPrintable algorithm.</summary>
            <param name="FilenameToEncode">A string containing the filename to encode.</param>
            <returns>A string containing the encoded text.</returns>
        </member>
        <member name="M:Xilium.Lib.Text.QuotedPrintable.Encode(System.IO.Stream,System.String)">
            <summary>Encodes a stream with the QuotedPrintable algorithm and saves it to a file.</summary>
            <param name="streamToEncode">A stream of the text to encode.</param>
            <param name="filename">A string containing the filename to save the encoded text to.</param>
        </member>
        <member name="M:Xilium.Lib.Text.QuotedPrintable.Encode(System.Char[],System.String)">
            <summary>Encodes a char array with the QuotedPrintable algorithm and saves it to a file.</summary>
            <param name="CharsToEncode">A char array containing the text to encode.</param>
            <param name="Filename">A string containing the filename to save the encoded text to.</param>
        </member>
        <member name="M:Xilium.Lib.Text.QuotedPrintable.Encode(System.String,System.String)">
            <summary>Encodes a file with the QuotedPrintable algorithm and saves it to a file.</summary>
            <param name="FilenameToEncode">A string containing the filename to encode.</param>
            <param name="Filename">A string containing the filename to save the encoded text to.</param>
        </member>
        <member name="M:Xilium.Lib.Text.QuotedPrintable.Decode(System.IO.Stream)">
            <summary>Decodes a stream encoded with the QuotedPrintable algorithm.</summary>
            <param name="StreamToEncode">A stream of the text to decode.</param>
            <returns>A string containing the decoded text.</returns>
        </member>
        <member name="M:Xilium.Lib.Text.QuotedPrintable.Decode(System.Char[])">
            <summary>Decodes a char array encoded with the QuotedPrintable algorithm.</summary>
            <param name="CharsToDecode">A char array containing the text to decode.</param>
            <returns>A string containing the decoded text.</returns>
        </member>
        <member name="M:Xilium.Lib.Text.QuotedPrintable.Decode(System.String)">
            <summary>Decodes a file encoded with the QuotedPrintable algorithm.</summary>
            <param name="FilenameToDecode">A string containing the filename to decode.</param>
            <returns>A string containing the decoded text.</returns>
        </member>
        <member name="M:Xilium.Lib.Text.QuotedPrintable.Decode(System.IO.Stream,System.String)">
            <summary>Decodes a stream encoded with the QuotedPrintable algorithm and saves it to a file.</summary>
            <param name="StreamToEncode">A stream of the text to decode.</param>
            <param name="filename">A string containing the filename to save the decoded text to.</param>
        </member>
        <member name="M:Xilium.Lib.Text.QuotedPrintable.Decode(System.Char[],System.String)">
            <summary>Decodes a char array encoded with the QuotedPrintable algorithm and saves it to a file.</summary>
            <param name="CharsToDecode">A char array containing the text to decode.</param>
            <param name="Filename">A string containing the filename to save the decoded text to.</param>
        </member>
        <member name="M:Xilium.Lib.Text.QuotedPrintable.Decode(System.String,System.String)">
            <summary>Decodes a file encoded with the QuotedPrintable algorithm and saves it to a file.</summary>
            <param name="FilenameToDecode">A string containing the filename to decode.</param>
            <param name="Filename">A string containing the filename to save the decoded text to.</param>
        </member>
        <member name="F:Xilium.Lib.Text.RegularExpression.FullnamePattern">
            <summary>
            Pattern per verificare che la casella contenga nome e cognome.
            Il pattern esegue un test sull'intera stringa.
            </summary>
        </member>
        <member name="F:Xilium.Lib.Text.RegularExpression.EmailTestPattern">
            <summary>
            Pattern per validare un indirizzo email.
            Il pattern esegue un test sull'intera stringa.
            </summary>
            <see cref="!:http://msdn.microsoft.com/en-us/library/01escwtf(v=vs.110).aspx"/>
        </member>
        <member name="F:Xilium.Lib.Text.RegularExpression.HttpUrlTestPattern">
            <summary>
            Pattern per validare un indirizzo URL HTTP, comprensivo di protocollo.
            Il pattern esegue un test sull'intera stringa.
            </summary>
        </member>
        <member name="F:Xilium.Lib.Text.RegularExpression.WwwUrlTestPattern">
            <summary>
            Pattern per validare un indirizzo URL (http, https, ftp), senza protocollo.
            Il pattern esegue un test sull'intera stringa.
            </summary>
        </member>
        <member name="F:Xilium.Lib.Text.RegularExpression.TelephoneTestPattern">
            <summary>
            Pattern per verificare un numero telefonico, locale o internazionale.
            Il pattern esegue un testo sull'intera stringa.
            </summary>
        </member>
        <member name="F:Xilium.Lib.Text.RegularExpression.IntegerTestPattern">
            <summary>
            Pattern per verificare un numero intero, sono consentiti valori positivi e negativi.
            Il pattern esegue un testo sull'intera stringa.
            </summary>
        </member>
        <member name="F:Xilium.Lib.Text.RegularExpression.DecimalTestPattern">
            <summary>
            Pattern per verificare un numero decimale, sono consentiti valori positivi e negativi, può iniziare per uno o più zeri, e può finire con uno o più zeri decimali, permette il separatore decimale Virgola e Punto.
            Il pattern è costruito per capire se è un numero convertibile in decimal, anche se non è formattato nel modo più corretto.
            Il pattern esegue un testo sull'intera stringa.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Text.RegularExpression.MatchNear(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Cerca il match più vicino possibile alla posizione `startAt`, e non oltre `tolerance` caratteri.
            </summary>
            <param name="pattern">
            pattern di ricerca.
            <para>Nota: deve iniziare con "^". Il metodo inserirà "\G" in testa al pattern.</para>
            <see cref="!:http://stackoverflow.com/questions/5884922/regex-match-startat-and-start-of-string"/>
            </param>
            <param name="text"></param>
            <param name="startAt"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.RegularExpression.MatchNear(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32)">
            <summary>
            Cerca il match più vicino possibile alla posizione `startAt`, e non oltre `tolerance` caratteri.
            </summary>
            <param name="regex">
            Regular Expression di verifica match. Attenzione: il pattern deve iniziare per "\G".
            <see cref="!:http://stackoverflow.com/questions/5884922/regex-match-startat-and-start-of-string"/>
            </param>
            <param name="text"></param>
            <param name="startAt"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Text.UniqueCode.CodeCheckerDeleage">
            <summary>
            Delegate che viene invocato dopo che è stato generato un codice valido.
            </summary>
            <param name="code">Il nuovo codice generato che dev'essere verificato.</param>
            <returns>Restituisce True se il codice risulta univoco.</returns>
        </member>
        <member name="T:Xilium.Lib.Text.Url64">
            <summary>
            Espone metodi per la conversione da e verso URL64.
            Il sistema URL64 deriva dal sistema BASE64; l'unica differenza consiste nella lista di caratteri utilizzati per la codifica:
            mentre il sistema BASE64 utilizza '+', '/', '=', il sistema URL64 utilizza rispettivamente '-', '.', '_'.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Text.Url64.FromBase64(System.String)">
            <summary>
            Converte una stringa in Base64 nel formato Url64
            </summary>
            <param name="base64value">Stringa codificata in Base64</param>
            <returns>Stringa in codifica Url64</returns>
        </member>
        <member name="M:Xilium.Lib.Text.Url64.ToBase64(System.String)">
            <summary>
            Converte una stringa in Url64 nel formato Base64
            </summary>
            <param name="url64value">Stringa codificata in Url64</param>
            <returns>Stringa in codifica Base64</returns>
        </member>
        <member name="T:Xilium.Lib.Text.WikiFormatter.SimplyFormatter">
            <summary>
            Converte il testo in HTML ricercando a-capo per i BR, e parentesi angolari per STRONG.
            </summary>
        </member>
        <member name="T:Xilium.Lib.Text.WikiFormatter.DefaultWikiFormatterAttribute">
            <summary>
            Creando una classe che eredita da WikiFormatterBase, e applicandovi questo attributo, si otterrà la classe di default per le conversioni WIKI Text2Html.
            </summary>
        </member>
        <member name="T:Xilium.Lib.Text.WikiFormatter.WikiFormatterDriver">
            <summary>
            Classe statica per ottenere l'elenco di classi che implementano WikiFormatBase.
            http://en.wikipedia.org/wiki/Lightweight_markup_language
            </summary>
        </member>
        <member name="P:Xilium.Lib.Text.WikiFormatter.WikiFormatterDriver.DefaultWikiFormatterType">
            <summary>
            Restituisce il tipo oggetto WikiFormatter di default.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Text.WikiFormatter.WikiFormatterDriver.WikiFormatterTypes">
            <summary>
            Restituisce l'elenco di tutti i tipi oggetto WikiFormatter disponibili.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Text.WikiFormatter.WikiFormatterDriver.DefaultWikiFormatter">
            <summary>
            Restituisce il WikiFormatter di default.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Text.WikiFormatter.WikiFormatterDriver.WikiFormatters">
            <summary>
            Restituisce l'elenco di tutti i WikiFormatter disponibili.
            </summary>
        </member>
        <member name="T:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase">
            <summary>
            Classe base per la conversione del testo in Html utilizzando un formato like-Wiki, "Lightweight markup language".
            http://en.wikipedia.org/wiki/Lightweight_markup_language
            </summary>
        </member>
        <member name="P:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.FormatName">
            <summary>
            Restituisce il nome del formato. Es: "Textile", "MarkDown".
            </summary>
        </member>
        <member name="P:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.HeadStart">
            <summary>
            Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.
            Se il valore indicato su HeadStart è 3, i tag H1 verranno tramutati in H3, i tag H2 in H4 e così via.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.ClassHeadStart">
            <summary>
            Indica il valore di partenza del classname "h1..h6" da settare sugli elementi H1...H6 del codice HTML risultante.
            Se il valore indicato su ClassHeadStart è 3, ai tag H1 verrà settato il classname "h3", ai tag H2 il classname "h4" e così via.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.FormatString(System.String)">
            <summary>
            Converte il testo in codice HTML, utilizzando il metodo ConvertTextToHtml, ricalcola i tag H1...6, applica le opzioni.
            </summary>
            <param name="text">Testo da formattare</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.FormatString(System.String,System.Int32,System.Int32)">
            <summary>
            Converte il testo in codice HTML, utilizzando il metodo ConvertTextToHtml, ricalcola i tag H1...6, applica le opzioni indicate per argomento.
            </summary>
            <param name="text">Testo da formattare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="classHeadStart">Indica il valore di partenza di inserimento dei classname "h1".."h6" sui tag H1..H6</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.FormatString(System.String,System.Int32,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Converte il testo in codice HTML, utilizzando il metodo ConvertTextToHtml, ricalcola i tag H1...6, applica le opzioni indicate per argomento.
            </summary>
            <param name="text">Testo da formattare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="options">Opzioni da applicare al codice HTML</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.FormatString(System.String,System.Int32,System.Int32,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Converte il testo in codice HTML, utilizzando il metodo ConvertTextToHtml, ricalcola i tag H1...6, applica le opzioni indicate per argomento.
            </summary>
            <param name="text">Testo da formattare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="classHeadStart">Indica il valore di partenza di inserimento dei classname "h1".."h6" sui tag H1..H6</param>
            <param name="options">Opzioni da applicare al codice HTML</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.FormatHtml(System.String)">
            <summary>
            Elabora il codice HTML con le opzioni di default: ricalcolo dei tag H1...H6, applicazione delle opzioni indicate per argomento.
            </summary>
            <param name="html">Codice HTML da elaborare</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.FormatHtml(System.String,System.Int32,System.Int32)">
            <summary>
            Elabora il codice HTML con le opzioni indicate: ricalcolo dei tag H1...H6, applicazione delle opzioni indicate per argomento.
            </summary>
            <param name="html">Codice HTML da elaborare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="classHeadStart">Indica il valore di partenza di inserimento dei classname "h1".."h6" sui tag H1..H6</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.FormatHtml(System.String,System.Int32,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Elabora il codice HTML con le opzioni indicate: ricalcolo dei tag H1...H6, applicazione delle opzioni indicate per argomento.
            </summary>
            <param name="html">Codice HTML da elaborare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="options">Opzioni da applicare al codice HTML</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.FormatHtml(System.String,System.Int32,System.Int32,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Elabora il codice HTML con le opzioni indicate: ricalcolo dei tag H1...H6, applicazione delle opzioni indicate per argomento.
            </summary>
            <param name="html">Codice HTML da elaborare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="classHeadStart">Indica il valore di partenza di inserimento dei classname "h1".."h6" sui tag H1..H6</param>
            <param name="options">Opzioni da applicare al codice HTML</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.ApplyOptions(System.String,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Applica le opzioni al codice HTML
            </summary>
            <param name="html">Codice HTML da rielaborare</param>
            <param name="options">Opzioni da applicare al codice HTML</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.DowngradeHeaders(System.String,System.Int32,System.Boolean)">
            <summary>
            Modifica gli item H1, H2, Hn in elementi Hn a cominciare da <param name="headStart">headStart</param>
            </summary>
            <param name="html">Testo da correggere</param>
            <param name="headStart">Primo Hx da utilizzare</param>
            <param name="allowExtraHeadingTaggs">Indica se è ammesso l'uso di tag Hn (come H1-h6) superiori al numero 6.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.SetHeadersClass(System.String,System.Int32)">
            <summary>
            Setta l'attributo class dei tag H1..H6 applicando il classname "h1".."h6".
            </summary>
            <param name="html">Codice HTML su cui eseguire l'operazione</param>
            <param name="classHeadStart">Numero del classname (da "h1" a "h6") da applicare ai tag H1; di conseguenza verrà applicato il classname anche ai tag H2, H3, H4, H5, H6, incrementando di 1 per ogni livello di profondità del titolo.</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.ToHtml(System.String)">
            <summary>
            Trasforma il testo in codice HTML, usando il metodo di formattazione FormatString.
            </summary>
            <param name="text">Testo da formattare</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.ToHtml(System.String,System.Int32,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Trasforma il testo in codice HTML, usando il metodo di formattazione FormatString.
            </summary>
            <param name="text">Testo da formattare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="options">Opzioni da applicare al codice HTML</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.ToHtml(System.String,System.Int32,System.Int32,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Trasforma il testo in codice HTML, usando il metodo di formattazione FormatString.
            </summary>
            <param name="text">Testo da formattare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="classHeadStart">Indica il valore di partenza di inserimento dei classname "h1".."h6" sui tag H1..H6</param>
            <param name="options">Opzioni da applicare al codice HTML</param>
            <returns>Il testo HTML ottenuto dall'elaborazione Textile su Value</returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.AsHtml(System.String)">
            <summary>
            Elabora il codice HTML col metodo FormatHtml, poi crea un oggetto IHtmlString.
            </summary>
            <param name="html">Codice HTML da elaborare</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.AsHtml(System.String,System.Int32,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Elabora il codice HTML col metodo FormatHtml, poi crea un oggetto IHtmlString.
            </summary>
            <param name="html">Codice HTML da elaborare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="options">Opzioni da applicare al codice HTML</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Text.WikiFormatter.WikiFormatterBase.AsHtml(System.String,System.Int32,System.Int32,Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions)">
            <summary>
            Elabora il codice HTML col metodo FormatHtml, poi crea un oggetto IHtmlString.
            </summary>
            <param name="html">Codice HTML da elaborare</param>
            <param name="headStart">Indica il valore di partenza degli elementi H1...H6 del codice HTML risultante.</param>
            <param name="classHeadStart">Indica il valore di partenza di inserimento dei classname "h1".."h6" sui tag H1..H6</param>
            <param name="options">Opzioni da applicare al codice HTML</param>
            <returns></returns>
        </member>
        <member name="T:Xilium.Lib.Text.WikiFormatter.WikiToHtmlOptions">
            <summary>
            Indica i parametri di conversione da testo Wiki a codice Html
            </summary>
        </member>
        <member name="F:Xilium.Lib.Threading.BackgroundWorker`4.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorker`4.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorker`4.initializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.DoWork">
            <summary>
            Consente di restituire e impostare la procedura che verrà invocata.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.IsBusy">
            <summary>
            La procedura è un corso di esecuzione
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.IsRunning">
            <summary>
            La procedura è in corso di esecuzione ed ha iniziato ad operare.
            </summary>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorker`4.RunWorker(`0)">
            <summary>
            Lancia la procedura DoWork nel thread corrennte
            </summary>
            <param name="argument">Argomento passato alla procedura</param>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorker`4.RunWorkerAsync(`0,System.Object)">
            <summary>
            Lancia la procedura DoWork nel thread indicato
            </summary>
            <param name="argument">Argomento passato alla procedura</param>
            <param name="taskId">Identificativo del thread su cui lanciare la procedura</param>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.ReturnedValueAsync">
            <summary>
            Restituisce il valore ritornato dall'ultima chiamata alla procedura
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.ReturnedErrorAsync">
            <summary>
            Restituisce l'oggetto Exception rappresentante l'errore dell'ultima esecuzione. Null se non c'è stato errore.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.ReturnedCancelAsync">
            <summary>
            Restituisce True se l'ultima esecuzione della procedura è stata annullata
            </summary>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorker`4.SendFastMessageAsync(`1)">
            <summary>
            Invio di un messaggio immediato al task.
            </summary>
            <param name="message">Il messaggio da inviare</param>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.SendFastMessagePending">
            <summary>
            Restituisce True se c'è un messaggio fast inviato dalla procedura non ancora elaborato
            </summary>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorker`4.SendQueueMessageAsync(`1)">
            <summary>
            Accoda un messaggio nella coda messaggi
            </summary>
            <param name="message">Il messaggio da inviare</param>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.SendQueueMessagePending">
            <summary>
            Restituisce True se sono stati inviati messaggi in coda alla procedura e non sono ancora stati elaborati
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.SendQueueMessageCount">
            <summary>
            Restituisce il numero di messaggi in coda inviati alla procedura non ancora letti
            </summary>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorker`4.ReceiveFastMessageAsync">
            <summary>
            Restituisce il messaggio inviato dalla procedura, poi lo rimuove
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.ReceiveFastMessagePending">
            <summary>
            Restituisce True se c'è un messaggio Fast inviato dalla procedura non ancora letto
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.ReceiveQueueMessagePending">
            <summary>
            Restituisce True se ci sono messaggi inviati dalla procedura non ancora elaborati
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.ReceiveQueueMessageAsync">
            <summary>
            Restituisce il primo messaggi insierito nella coda messaggi da parte della procedura, poi lo rimuove
            </summary>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorker`4.CancelAsync">
            <summary>
            Richiede l'annullamento del processo in background
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.CancelPending">
            <summary>
            Restituisce True se è stato richiesto l'annullamento del processo e questo è ancora sospeso
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorker`4.CancelProcessed">
            <summary>
            Restituisce True se è in corso l'annullamento del processo
            </summary>
        </member>
        <member name="F:Xilium.Lib.Threading.MessageActionTypeEnum.ReadFastMsg">
            <summary>
            Messaggio Fast letto dalla procedura
            </summary>
        </member>
        <member name="F:Xilium.Lib.Threading.MessageActionTypeEnum.ReadQueueMsg">
            <summary>
            Messaggio di coda letto dalla procedura
            </summary>	
        </member>
        <member name="F:Xilium.Lib.Threading.MessageActionTypeEnum.WriteFastMsg">
            <summary>
            Messaggio Fast inviato dalla procedura al chiamante
            </summary>
        </member>
        <member name="F:Xilium.Lib.Threading.MessageActionTypeEnum.WriteQueueMsg">
            <summary>
            Messaggio di coda inviato dalla procedura al chiamante
            </summary>
        </member>
        <member name="T:Xilium.Lib.Threading.BackgroundWorkerConnector`4">
            <summary>
            Questa classe si preoccupa di tenere la comunicazione con il thread interno.
            </summary>
            <typeparam name="TArg">Tipo dell'argomento che viene passato alla procedura di ingresso per il thread</typeparam>
            <typeparam name="TSendMsg">Tipo dato inviato al thread per messaggio</typeparam>
            <typeparam name="TReturnMsg">Tipo dato di ritorno per i messaggi dal thread</typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorkerConnector`4.SetSupportedFeatures(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Setta le funzionalità supportate dalla procedura invocata. Dev'essere eseguita il prima possibile.
            </summary>
            <param name="cancelSupported">True se la procedura supporta l'annullamento</param>
            <param name="readingFastMessageSupported">True se la procedura supporta la ricezione di messaggi Fast dal chiamante</param>
            <param name="readingQueueMessagesSupported">True se la procedura supporta la ricezione di code di messaggi dal chiamante</param>
            <param name="writingFastMessageSupported">True se la procedura supporta l'invio di messaggi Fast al chiamante</param>
            <param name="writingQueueMessagesSupported">True se la procedura supporta l'invio di code di messaggi al chiamante</param>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorkerConnector`4.IsRunning">
            <summary>
            Indica che la procedura ha iniziato ad operare. Viene portata a True appena viene invocato il metodo SetSupportedFeatures.
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorkerConnector`4.ReceivedFastMessagePending">
            <summary>
            Restituisce True se esiste un messaggio fast da leggere da parte del thread chiamante
            </summary>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorkerConnector`4.GetReceivedFastMessage">
            <summary>
            Restituisce il messaggio ricevuto da parte del chiamante, poi lo rimuove
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorkerConnector`4.ReceivedQueueMessagesPending">
            <summary>
            Restituisce True se esistono messaggi in coda da parte del chiamante
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorkerConnector`4.ReceivedQueueMessagesCount">
            <summary>
            Restituisce il numero di messaggi in coda da parte del chiamante
            </summary>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorkerConnector`4.GetReceivedQueueMessage">
            <summary>
            Restituisce il primo messaggio in coda ricevuto da parte del chiamante, poi lo rimuove dalla coda
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorkerConnector`4.SendFastMessage(`2)">
            <summary>
            Invia al chiamante un messaggio Fast
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorkerConnector`4.SentFastMessagePending">
            <summary>
            Restituisce True se la procedura ha inviato un messaggio che il chiamante non ha ancora letto
            </summary>
        </member>
        <member name="M:Xilium.Lib.Threading.BackgroundWorkerConnector`4.SendQueueMessage(`2)">
            <summary>
            Aggiunge un messaggio alla coda messaggi per il chiamante
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorkerConnector`4.SentQueueMessageCount">
            <summary>
            Restituisce il numero di messaggi spediti al chiamante non ancura elaborati
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorkerConnector`4.CancelPending">
            <summary>
            Restituisce True se il chiamante ha fatto richiesta di annullamento della procedura, che non è stata ancora elaborata
            </summary>
        </member>
        <member name="P:Xilium.Lib.Threading.BackgroundWorkerConnector`4.Cancel">
            <summary>
            Settare su True per indicare che la procedura è stata annullata.
            </summary>
        </member>
    </members>
</doc>
